<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纸飞机</title>
  
  <subtitle>您的云收藏知识库！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blockshare.top/"/>
  <updated>2018-06-09T08:17:02.925Z</updated>
  <id>http://blockshare.top/</id>
  
  <author>
    <name>zhifeiji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>外文翻译丨“王者对战”之 MySQL 8 vs PostgreSQL 10（深度） - 今日头条</title>
    <link href="http://blockshare.top/2018/d12061f0/"/>
    <id>http://blockshare.top/2018/d12061f0/</id>
    <published>2018-06-09T08:17:01.000Z</published>
    <updated>2018-06-09T08:17:02.925Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在是时候回顾一下这两大开源关系型数据库是如何彼此竞争的。在这些版本之前，人们普遍认为，Postgres在功能集表现更出色，也因其“学院派”风格而备受称赞。</p></blockquote><p>参与翻译 (5人) &#58; 雪落无痕xdj, 无若, LinuxTech, Tocy, kevinlinkai</p><p>英文原文：Showdown&#58; MySQL 8 vs PostgreSQL 10</p><p>既然 MySQL 8 和 PostgreSQL 10 已经发布了，现在是时候回顾一下这两大开源关系型数据库是如何彼此竞争的。</p><p>在这些版本之前，人们普遍认为，Postgres 在功能集表现更出色，也因其“学院派”风格而备受称赞，MySQL 则更善长大规模并发读/写。</p><p>但是随着它们最新版本的发布，两者之间的差距明显变小了。</p><p><strong>1、特性比较</strong></p><p>让我们来看看我们都喜欢谈论的“时髦”功能。</p><p>过去经常会说 MySQL 最适合在线事务，PostgreSQL 最适合分析流程。但现在不是了。</p><p>公共表表达式(CTEs) 和窗口函数是选择 PostgreSQL 的主要原因。但是现在，通过引用同一个表中的 boss_id 来递归地遍历一张雇员表，或者在一个排序的结果中找到一个中值（或 50%），这在 MySQL 上不再是问题。</p><p>在 PostgreSQL 中进行复制缺乏配置灵活性，这就是 Uber 转向 MySQL 的原因。但是现在，有了逻辑复制特性，就可以通过创建一个新版本的 Postgres 并切换到它来实现零停机升级。在一个巨大的时间序列事件表中截断一个陈旧的分区也要容易得多。</p><p>就特性而言，这两个数据库现在都是一致的。</p><p><strong>2、有哪些不同之处呢？</strong></p><p>现在，我们只剩下一个问题 —— 那么，选择一个而不选另一个的原因是什么呢？</p><p><strong>生态系统</strong>是其中一个因素。MySQL 有一个充满活力的生态系统，包括 MariaDB、Percona、Galera 等等，以及除 InnoDB 以外的存储引擎，但这也可能是和令人困惑的。Postgres 的高端选择有限，但随着最新版本引入的新功能，这会有所改变。</p><p><strong>治理</strong>是另一个因素。当 Oracle（或最初的 SUN）收购 MySQL时，每个人都担心他们会毁掉这个产品，但在过去的十年里，这并不是事实。事实上，在收购之后，发展反倒加速了。而 Postgres 在工作管理和协作社区方面有着丰富的经验。</p><p><strong>基础架构</strong>不会经常改变，虽然近来没有对这方面的详细讨论，这也是值得再次考虑的。</p><p>来复习下：</p><p><strong>3、进程vs线程</strong></p><p>当 Postgres 派生出一个子进程来建立连接时，每个连接最多可以占用 10MB。与 MySQL 的线程连接模型相比，它的内存压力更大，在 64 位平台上，线程的默认堆栈大小为 256KB。（当然，线程本地排序缓冲区等使这种开销变得不那么重要，即使在不可以忽略的情况下，仍然如此。）</p><p>尽管“写时复制”保存了一些与父进程共享的、不可变的内存状态，但是当您有 1000 多个并发连接时，基于流程的架构的基本开销是很繁重的，而且它可能是容量规划的最重要的因素之一。</p><p>也就是说，如果你在 30 台服务器上运行一个 Rails 应用，每个服务器都有 16 个 CPU 核心 32 线程，那么你有 960 个连接。可能只有不到 0.1% 的应用会超出这个范围，但这是需要记住的。</p><p><strong>4、聚簇索引 vs 堆表</strong></p><p>聚簇索引是一种表结构，其中的行直接嵌入其主键的 b 树结构中。一个（非聚集）堆是一个常规的表结构，它与索引分别填充数据行。</p><p>有了聚簇索引，当您通过主键查找记录时，单次 I/O 就可以检索到整行，而非集群则总是需要查找引用，至少需要两次 I/O。由于外键引用和 JOIN 将触发主键查找，所以影响可能非常大，这将导致大量查询。</p><p>聚簇索引的一个理论上的缺点是，当您使用二级索引进行查询时，它需要遍历两倍的树节点，第一次扫描二级索引，然后遍历聚集索引，这也是一棵树。</p><p>但是，如果按照现代表设计的约定，将一个自动增量整数作为主键&#91;1&#93;——它被称为代理键——那么拥有一个聚集索引几乎总是可取的。更重要的是，如果您做了大量的 ORDER BY id 来检索最近的（或最老的）N 个记录的操作，我认为这是很适用的。</p><p>Postgres 不支持聚集索引，而 MySQL(InnoDB)不支持堆。但不管怎样，如果你有大量的内存，差别应该是很小的。</p><p><strong>5、页结构和压缩</strong></p><p>Postgres 和 MySQL 都有基于页面的物理存储。(8KB vs 16KB)</p><p>PostgreSQL 物理存储的介绍</p><p>页结构看起来就像右边的图。它包含一些我们不打算在这里讨论的条目，但是它们包含关于页的元数据。条目后面的项是一个数组标识符，由指向元组或数据行的（偏移、长度）对组成。在 Postgres 中，相同记录的多个版本可以以这种方式存储在同一页面中。</p><p>MySQL 的表空间结构与 Oracle 相似，它有多个层次，包括层、区段、页面和行层。</p><p>此外，它还有一个用于撤销的单独段，称为“回滚段”。与 Postgres 不同的是，MySQL 将在一个单独的区域中保存同一记录的多个版本。</p><p>如果存在一行必须适合两个数据库的单个页面，，这意味着一行必须小于 8KB。（至少有 2 行必须适合 MySQL 的页面，恰巧是 16KB/2 = 8KB）</p><p>那么当你在一个列中有一个大型 JSON 对象时会发生什么呢？</p><p>Postgres 使用 TOAST，这是一个专用的影子表(shadow table)存储。当行和列被选中时，大型对象就会被拉出。换句话说，大量的黑盒不会污染你宝贵的缓存。它还支持对 TOAST 对象的压缩。</p><p>MySQL 有一个更复杂的特性，叫做透明页压缩，这要归功于高端 SSD 存储供应商 Fusio-io 的贡献。它设计目的是为了更好地使用 SSD，在 SSD 中，写入量与设备的寿命直接相关。</p><p>对 MySQL 的压缩不仅适用于页面外的大型对象，而且适用于所有页面。它通过在稀疏文件中使用打孔来实现这一点，这是被 ext4 或 btrfs 等现代文件系统支持的。</p><p>有关更多细节，请参见：在 FusionIO 上使用新 MariaDB 页压缩获得显著的性能提升。</p><p><strong>6、更新的开销</strong></p><p>另一个经常被忽略的特性，但是对性能有很大的影响，并且可能是最具争议的话题，是更新。</p><p>这也是Uber放弃Postgres的另一个原因，这激起了许多Postgres的支持者来反驳它。</p><ul><li>MySQL 对Uber可能是合适的, 但是未必对你合适- 一篇PostgreSQL对Uber的回应 (PDF)<br>两者都是MVCC数据库，它们可以隔离多个版本的数据。</li></ul><p>为了做到这一点，Postgres将旧数据保存在堆中，直到被清空，而MySQL将旧数据移动到一个名为回滚段的单独区域。</p><p>在Postgres中，当您尝试更新时，整个行必须被复制，以及指向它的索引条目也被复制。这在一定程度上是因为Postgres不支持聚集索引，所以从索引中引用的一行的物理位置不是由逻辑键抽象出来的。</p><p>为了解决这个问题，Postgres使用了堆上元组（HOT），在可能的情况下不更新索引。但是，如果更新足够频繁（或者如果一个元组比较大），元组的历史可以很容易地超过8 KB的页面大小，跨越多个页面并限制该特性的有效性。修剪和/或碎片整理的时间取决于启发式解决方案。另外，设置不超过100的填充参数会降低空间效率——这是一种很难在创建表时考虑的折衷方案。</p><p>这种限制更深入; 因为索引元组没有关于事务的任何信息，所以直到9.2之前一直不能支持仅索引扫描。 它是所有主要数据库（包括MySQL，Oracle，IBM DB2和Microsoft SQL Server）支持的最古老，最重要的优化方法之一。 但即使使用最新版本，当有许多UPDATE在可见性映射中设置脏位时，Postgres也不能完全支持仅索引扫描，并且在我们不需要时经常选择Seq扫描。</p><p>在MySQL上，更新发生在原地，旧的行数据被封存在一个称为回滚段的独立区域中。 结果是你不需要VACUUM，并且提交非常快，而回滚相对较慢，这对于大多数用例来说是一个可取的折衷。</p><p>它也足够聪明，尽快清除历史。 如果事务的隔离级别设置为<strong>READ-COMMITTED</strong>或更低，则在语句完成时清除历史记录。</p><p>事务记录的大小不会影响主页面。 碎片化是一个伪命题。 因此，在MySQL上能更好，更可预测整体性能。</p><p><strong>7、Garbage Collection 垃圾回收</strong></p><p>在Postgres中VACUUM上开销很高，因为它在主要工作在堆区，造成了直接的资源竞争。它感觉就像是编程语言中的垃圾回收 - 它会挡在路上，并随时让你停下来。</p><p>为具有数十亿记录的表配置autovacuum仍然是一项挑战。</p><p>在MySQL上清除（Purge）也可能相当繁重，但由于它是在单独的回滚段中使用专用线程运行的，因此它不会以任何方式影响读取的并发性。即使使用默认配置，变膨胀的回滚段使你执行速度减慢的可能性也是很低的。</p><p>拥有数十亿记录的繁忙表不会导致MySQL上的历史数据膨胀，诸如存储上的文件大小和查询性能等事情上几乎是可以预测的并且很稳定。</p><p><strong>开源中国翻译频道</strong>：对于技术达人来说，广纳知识点是进步的源泉。通过阅读技术文章我们可以学到很多东西，既可以学到业务技能，又可以了解行业动态，最不济，也锻炼了阅读和学习的能力。开源中国翻译频道旨在每天为用户推荐并翻译优质的外网文章。再也不用怕因为英语不过关，被挡在许多技术文章的门外。</p><blockquote><p><strong>转载来源</strong>：<a href="https://m.toutiaocdn.cn/group/6563864257178370567/?iid=34828483677&amp;app=news_article&amp;timestamp=1528532107&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">外文翻译丨“王者对战”之 MySQL 8 vs PostgreSQL 10（深度） - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;现在是时候回顾一下这两大开源关系型数据库是如何彼此竞争的。在这些版本之前，人们普遍认为，Postgres在功能集表现更出色，也因其“学院派”风格而备受称赞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参与翻译 (5人) &amp;#58; 雪落无痕xdj,
      
    
    </summary>
    
      <category term="其它" scheme="http://blockshare.top/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="MySQL" scheme="http://blockshare.top/tags/MySQL/"/>
    
      <category term="MariaDB" scheme="http://blockshare.top/tags/MariaDB/"/>
    
      <category term="Uber" scheme="http://blockshare.top/tags/Uber/"/>
    
      <category term="固态硬盘" scheme="http://blockshare.top/tags/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>机器学习 —— 浅谈贝叶斯和MCMC</title>
    <link href="http://blockshare.top/2018/84be87fc/"/>
    <id>http://blockshare.top/2018/84be87fc/</id>
    <published>2018-06-08T19:53:03.000Z</published>
    <updated>2018-06-08T19:53:04.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于贝叶斯和MCMC一些数学原理的讲解和代码的实现</p></blockquote><blockquote><p><strong>转载来源</strong>：<a href="http://mp.weixin.qq.com/s?__biz=MzAwNDI4ODcxNA==&amp;mid=2652247937&amp;idx=1&amp;sn=3bb1546658c1d6b7c3b9ff14fa8a5cff&amp;chksm=80cc8e24b7bb073242d64be4c366b5f6609d437e9cb5688dc274f43254b5f5863317d67039ac&amp;mpshare=1&amp;scene=1&amp;srcid=0609lHd9LbbMYFb7SZpHJuEA#rd" target="_blank" rel="noopener">机器学习 —— 浅谈贝叶斯和MCMC</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关于贝叶斯和MCMC一些数学原理的讲解和代码的实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转载来源&lt;/strong&gt;：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=M
      
    
    </summary>
    
    
      <category term="人工智能头条" scheme="http://blockshare.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%A4%B4%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>医生端移动医疗APP使用调研报告：医生需求表现出“务实性”，工具类APP或成最大赢家</title>
    <link href="http://blockshare.top/2018/37a04eff/"/>
    <id>http://blockshare.top/2018/37a04eff/</id>
    <published>2018-06-08T02:31:14.000Z</published>
    <updated>2018-06-08T02:31:15.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>动脉网vcbeat|本次调研主要基于动脉网平台的医生资源，通过随机发送问卷并收集整理反馈的问卷，分析调研结果，制作了此份报告。报告呈现了医生端移动医疗的发展国产与未来趋势</p></blockquote><blockquote><p><strong>转载来源</strong>：<a href="http://mp.weixin.qq.com/s?__biz=MjM5MTMyMDg0Ng==&amp;mid=2650409739&amp;idx=1&amp;sn=267fcdc2095722aff75eafef55f5bc0d&amp;chksm=beb9f56a89ce7c7c595f559eb3c94a97f93f17a8837e3053448aa42e7e10cc5368b6893c8700&amp;mpshare=1&amp;scene=1&amp;srcid=0608Q3pKO2pxLmdzSZuXYM6M#rd" target="_blank" rel="noopener">医生端移动医疗APP使用调研报告：医生需求表现出“务实性”，工具类APP或成最大赢家</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;动脉网vcbeat|本次调研主要基于动脉网平台的医生资源，通过随机发送问卷并收集整理反馈的问卷，分析调研结果，制作了此份报告。报告呈现了医生端移动医疗的发展国产与未来趋势&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;str
      
    
    </summary>
    
    
      <category term="动脉网" scheme="http://blockshare.top/tags/%E5%8A%A8%E8%84%89%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>教你用IPFS安全地分享区块链上的文件 - 区块链兄弟</title>
    <link href="http://blockshare.top/2018/75f1c634/"/>
    <id>http://blockshare.top/2018/75f1c634/</id>
    <published>2018-06-07T05:02:46.000Z</published>
    <updated>2018-06-07T05:02:48.668Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>教你用IPFS安全地分享区块链上的文件 - 区块链兄弟</p></blockquote><h2 id="教你用IPFS安全地分享区块链上的文件-区块链兄弟"><a href="#教你用IPFS安全地分享区块链上的文件-区块链兄弟" class="headerlink" title="教你用IPFS安全地分享区块链上的文件 - 区块链兄弟"></a>教你用IPFS安全地分享区块链上的文件 - 区块链兄弟</h2><blockquote><p><strong>转载来源</strong>：<a href="http://www.blockchainbrother.com/article/1469" target="_blank" rel="noopener">教你用IPFS安全地分享区块链上的文件 - 区块链兄弟</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;教你用IPFS安全地分享区块链上的文件 - 区块链兄弟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;教你用IPFS安全地分享区块链上的文件-区块链兄弟&quot;&gt;&lt;a href=&quot;#教你用IPFS安全地分享区块链上的文件-区块链兄弟&quot; class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>曹山石点评独角兽基金：CDR不会高位接美股回A股 - 今日头条</title>
    <link href="http://blockshare.top/2018/29cbb122/"/>
    <id>http://blockshare.top/2018/29cbb122/</id>
    <published>2018-06-06T13:16:36.000Z</published>
    <updated>2018-06-06T13:16:37.488Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新时代证券研究所所长孙金炬CDR研报已经出到系列十。ADR、HDR、TDR、双重上市、第二上市、分拆上市、双向存托凭证．．．．．说实话，系列研报追下来，要问我学到啥。</p></blockquote><p>最近A股新名词层出不穷，很是热闹。新时代证券研究所所长孙金炬CDR研报已经出到系列十。</p><p>ADR、HDR、TDR、双重上市、第二上市、分拆上市、双向存托凭证．．．．．说实话，系列研报追下来，要问我学到啥。我可以明确的告诉你：很多。要是你再追问细节，我同样可以明确的告知：请让我再看一次研报。</p><p>为了达到蛊惑人的目的，魔鬼可以为你背诵圣经。让我们说话的方式简单点。</p><p>简而言之，A股当前的重头戏（发展任务）就是：独角兽战略和沪伦通。</p><p>消息说了，由证监会主导的6只独角兽基金将于下周一也即6月11日起开始募集，并在十天内快速成立。</p><p>昨天（6月5日），华夏、汇添富、易方达、南方、招商、嘉实等公募（其中五家也是证金资管计划管理方），纷纷晒出新品海报——有意思的是，从这些海报来看，跟以往的产品宣传海报不同，它们既没有产品名称，也没有产品发行日期。</p><p>从宣传材料来看，银行对各家基金公司的“独角兽”产品基本采用了同一套说辞，对独角兽基金主要提到了“前所未有的战略力度”“前所未有的战略机遇”“前所未有的普惠金融”“前所未有的低费让利”等四大优势。</p><p>关系到钱的时候：咱们能说数字，就别整形容词。</p><p>6只产品募集上限为500亿，也就是3000亿公募独角兽基金。</p><p>相比之下，2017年全年A股IPO规模为2100亿。</p><p>应该说，金融圈内不乏聪明人：与过往采用战略配售的IPO案例中直接发行和战略配售的价格往往一致不同，独角兽基金参与CDR项目的战略配售有望拿到较高程度的折价，这将大大提高独角兽基金的吸引力。</p><p>所以说，3000亿募集必然是不成问题的，毕竟有四大行两八肋插刀，要知道，单只一个招行，理财资金规模就超过2万亿。</p><p>给新基折价打独角兽，成都打新房就是新近成功案例。</p><p>成都限购政策，堪称中国城市限购史上“教科书级表演”。通过高新区和天府限购，高位回收流动性，防止外来资金高位出逃。然后陆续实施限贷，限价，限捂盘，一二手倒挂，2017下半年，成功祭出人才落户大杀器，政策大开大合，但每一次都体现了成都精致利民而又步步紧逼的智慧。</p><p>当然，有人腹诽CDR相当于高位接美股回来给A股，若美股跌20%估值，那画面太美不敢看。我认为这是杞人忧天，美股泡沫风险年初监管层就提上日程了。个人要相信组织。</p><p>至于锁定三年期后事情，现在说得清吗？房子都还限售五年不照样抢？</p><p>忙完这一阵，接下来就可以忙下一阵了，心疼证监会。搞完独角兽，年内还得开沪伦通。</p><p>中信证券报告称，计划在年内开通的沪伦通预计将初步采用双向存托凭证机制。预计伦敦上市公司在华融资规模大致在4600亿人民币左右。</p><p>报告最后还说：整体流动性压力不大。嗯，知道了。</p><p>听说啊，有机构想不明白，两个交易时间不重叠的市场怎么通，互相开夜盘？主管讲领导说了能通，就一定能通，这机构一定是知识储备还不够。</p><p>两边发DR，全球成熟市场通——全球通只要是能移动的用户，都能理解的。</p><p>监管力推资本市场这一派蓬勃发展之态，往日那些金融巨头正忙不迭发展科技。</p><p>马明哲已经公开表态，中国平安未来的发展方向与其说是一家金融机构，不如说是一家科技公司，其对标的将是BAT这样的科技公司。</p><p>招商银行旗帜鲜明地提出了“金融科技银行”的新定位，将科技变革作为未来3至5年的重中之重。</p><p>去年底，蚂蚁金服邀请相熟的媒体主管夜话喝茶，主题是如何从大众眼中的金融企业变为科技企业。一晚聊下来，我印象最深刻的副总裁那句话——马老板说，妈的当初蚂蚁金服这名字，还不如叫蚂蚁科服。</p><p>当然，英国政府2015年3月提出的监管沙盒（Regulatory Sandbox）概念，可以很好的解释这一切，按照英国金融行为监管局的定义，“监管沙盒”是一个“安全空间”，在这个安全空间内，金融科技企业可以测试其创新的金融产品、服务、商业模式和营销方式，而不用在相关活动碰到问题时立即受到监管规则的约束。</p><p>像京东金融的股权融资，这样6层嵌套，搞那么复杂。现在为了监管方便，要求穿透，这不是平添监管工作任务吗？</p><p>所以，现在银行监管机构几乎每天都在蚂蚁金服杭州总部监控其金融服务业务。路透说，受到来自央行的压力，蚂蚁金服旗下的芝麻信用已经停止发布个人信用评级。现阶段，芝麻信用仅能用于非金融目的，比如在自行车租用和签证审批时作为信用审查。</p><p>花开两朵，各表一枝。</p><p>说完证监会牛仔很忙，来看各家机构在操心啥。</p><p>从当前的情冴来看， 2018年仍然值得担忧的风险有两个方面：一是居民部门杠杆率的高企及其与房地产市场的深度捆绑，二是PPP项目泛滥与棚改如火如荼的背后，地方政府债务压力的不断上升。</p><p>这意味着，未来防风险的领域将从金融部门扩展到居民部门与政府部门，政策将从致力于金融去杠杆扩展到居民与政府部门去杠杆。</p><p>如今机构在与投资者交流过程中，无论是债券还是权益市场，最为关心的是信用风险会不会继续发酵？有哪些领域可能作为下一阶段的重灾区？</p><p>那今天呢，我看到家属接近部委的中信证券固收研究主管明明说了，“下半年降准仍然是有可能的，只是上半年已经降了两次了，年中没有必要这么频繁的降。”</p><p>这就意味着，本月资金面有点难盼到有源头活水来。</p><p>莲花山下史丹利招商证券固收团队，最近研报主题是：《信用风险行业比较：逻辑、框架与测度》、《破解违约债券的基因密码》；</p><p>那兴业证券固收团队，主题则是《议信用风险的演化、市场冲击及政策对冲措施》《再议。。。》《“解码”信用资质系列专题（大概会一二三吧）》</p><p>应该说，全市场最早提示并专题研究信用风险的，是长江证券宏观首席赵伟团队，只不过语言比较学术（繁荣的顶点），不是很合买方和市场的牙口。</p><p>你说，有两卖方标题《砥砺前行》和《未来已来》，怎么辨别多空态度？</p><p>这些研报，有一说一，说实话我都看完了。</p><p>市场上公开信息足够多，需要通过工具把这些碎片化的信息有效的梳理，放在价值链上去应用。</p><p>投资是个专业的活，要是都是一套简单逻辑：公司前景够好，管理层有动力，股票就一定好——这不就等同说，只要兄弟够忠心，老婆够漂亮，此生足矣。</p><p>北宋有一个哥们，他是卖炊饼的…</p><p>那么，结合这些研报，我总结一下专业排雷口诀：</p><p>三长一短选最短，三短一长选最长，长短不一选择B，层次不起就选D，同长为A，同短为C，以抄为主，以蒙为辅，蒙抄结合，一定及格。</p><p>还有几个老油条的说法：</p><p>避免老千股这种事儿，财务可以提供一些蛛丝马迹，但完全靠报表那点儿数据确实不容易。可综合以下手段：1，意图层面，有大笔套现或者圈钱嫌疑的不碰；2，业务生僻难懂的公司尽量不碰；3，生僻难懂还利润奇高的更不碰；4，下游客户难寻却生意做得很大的不碰；5，基本没有同业竞争对手或创世界技术奇迹的，要高度谨慎；6，现金流差而资本运作动作大或者频繁的要谨慎；7，经营数据与同业相比差异过大，原因又很蹊跷的不碰。</p><p>无论是选项目还是配股票，财报很重要，这四条一定要盯紧，多问个为什么。</p><p>1）逆天的年底业绩变脸。</p><p>2）经营现金流与净利润背离。</p><p>3）庞大且不正常的在建工程。</p><p>4）巨额披露不详的减值准备。</p><p>案例探讨一下，去年7月底一家公司在建工程2016年完工进度98%，2017年99%，在建工程占资产的一半。结果还出来融资，以为很多投资人只看利润表和对赌。今年业绩大规模预减了解一下。</p><p>最后，来点正能量，啄木鸟啄虫，是为了树的健康。</p><p>认识有些年的对冲基金老友就说：</p><p>对独角兽们的IPO，很多人看不清楚它所带来的影响。按证监会透露的国内独角兽分批上市规划，100家资产10亿美金，50家资产20亿美金。那就是2000亿美金约合12600亿元资产。怎么发？怎么个节奏？</p><p>我个人觉得这是一个绝佳的机会收拾干净国内资本市场。也就是说，进入机构博弈时代。五个“二十万亿”级别方阵博弈的格局，即：私募、公募、产业、养老社保、外资。选股能力成为常态，退市和发行制度对称，整体换手下降，散户和股神文化回归国际常识，正确的投机，大于投机正确。</p><p>打个比方吧，老蒋当年完全有能力将红军困在湘桂边境，但他的小诸葛杨永泰建议驱兵入西南，顺带收拾云贵川滇的军阀，一举多得。当然是否如此历史上有争议，但实际效果是为未来的抗日留下了稳健的大后方。</p><p>借大小独角兽们厘清投资格局，开拓注册制，建立标准化的常效模式，吸引境内外规范资金，创新进取，应付未来金融之动荡，这也许是管理层的苦心。</p><p>但路径也许会一波三折，利弊皆有。</p><p>而不可忽视的时代特征是，今年是改革开放40周年。四季度可能召开十九届四中全会，历次四中全会均制定经济和改革重要事项，华泰宏观首席李超认为这将有望成为中国A股牛市的重要催化剂。</p><p>李超同时认为，从中长期来看，2018年可能将会和2000年互联网泡沫时期类似，大概率出现美元指数和美股同步下行。</p><p>在其看来，本轮美元周期已来到大周期向下拐点，美元周期趋弱时资本回流新兴市场的可能性较大，中国在新兴市场的对比当中优势明显，未来A股中长期可能触发外生流动性宽松牛市。</p><p>回首2006-2007 年，正是由于资本流入而触发了一轮以价值重估为主线的牛市。外生的流动性宽松持续压低无风险利率，而且外生流动性宽松与2008年金融危机以前我国贸易增速较高共同推高企业盈利预期，上证综指一度超过6000点。</p><p>也就是，我国存量流动性宽裕，在金融去杠杆的大背景下，如果经济形势较好，央行会倾向于较快地收紧流动性，因此基本面很难触发A股牛市。</p><p>所以，如果美国股市大幅调整又没有引发金融危机的话，外汇占款增长将会成为我国基础货币供给的新支点， 外生性宽松将在较长时间内利好A股市场。 </p><p>一句话，如果美股崩而不倒，A股有望由此迎长牛。</p><p>本文源自山石观市</p><p>更多精彩资讯，请来金融界网站(<a href="http://www.jrj.com.cn" target="_blank" rel="noopener">www.jrj.com.cn</a>)</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.cn/group/6563903785154904580/?iid=34137106508&amp;app=news_article&amp;timestamp=1528290987&amp;article_category=stock&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">曹山石点评独角兽基金：CDR不会高位接美股回A股 - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;新时代证券研究所所长孙金炬CDR研报已经出到系列十。ADR、HDR、TDR、双重上市、第二上市、分拆上市、双向存托凭证．．．．．说实话，系列研报追下来，要问我学到啥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近A股新名词层出不穷，很是热闹。新时
      
    
    </summary>
    
      <category term="财经" scheme="http://blockshare.top/categories/%E8%B4%A2%E7%BB%8F/"/>
    
    
      <category term="投资" scheme="http://blockshare.top/tags/%E6%8A%95%E8%B5%84/"/>
    
      <category term="美股" scheme="http://blockshare.top/tags/%E7%BE%8E%E8%82%A1/"/>
    
      <category term="基金" scheme="http://blockshare.top/tags/%E5%9F%BA%E9%87%91/"/>
    
      <category term="蓝筹股" scheme="http://blockshare.top/tags/%E8%93%9D%E7%AD%B9%E8%82%A1/"/>
    
      <category term="芝麻信用" scheme="http://blockshare.top/tags/%E8%8A%9D%E9%BA%BB%E4%BF%A1%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何精确统计页面停留时长 - 今日头条</title>
    <link href="http://blockshare.top/2018/61443e80/"/>
    <id>http://blockshare.top/2018/61443e80/</id>
    <published>2018-06-05T12:54:07.000Z</published>
    <updated>2018-06-05T12:54:08.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>active页面活跃时长visible页面可见时长//仅支持Desktopduration页面总停留时长6。</p></blockquote><h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a><strong>1.背景</strong></h1><p>页面停留时间（Time on Page）简称 Tp，是网站分析中很常见的一个指标，用于反映用户在某些页面上停留时间的长短，传统的Tp统计方法会存在一定的统计盲区，比如无法监控单页应用，没有考虑用户切换Tab、最小化窗口等操作场景。 基于上述背景，重新调研和实现了精确统计页面停留时长的方案，需要 兼容单页应用和多页应用，并且不耦合或入侵业务代码。</p><h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a><strong>2.分析</strong></h1><p>我们可以把一个页面生命周期抽象为三个动作： 「进入」、「活跃状态切换」、「离开」</p><p>如下图，计算页面停留时长既如何监控这三个动作，然后在对应触发的事件中记录时间戳，比如要统计活跃停留时长就把 active 区间相加即可，要统计总时长既 tn -t0 。</p><p>2.1 如何监听页面的进入和离开？</p><p>对于常规页面的 首次加载、页面关闭、刷新 等操作都可以通过 window.onload 和 window.onbeforeunload 事件来监听页面进入和离开，浏览器前进后退可以通过 pageshow 和 pagehide 处理。</p><p>对于单页应用内部的跳转可以转化为两个问题：<strong>1.监听路由变化，2.判断变化的URL是否为不同页面 。</strong></p><p>2.1.1 监听路由变化</p><p>目前主流的单页应用大部分都是基于 browserHistory (history api) 或者 hashHistory 来做路由处理，我们可以通过监听路由变化来判断页面是否有可能切换。注意是有可能切换，因为URL发生变化不代表页面一定切换，具体的路由配置是由业务决定的（既URL和页面的匹配规则）。</p><p><strong>browserHistory</strong></p><p>路由的变化本质都会调用 History.pushState() 或 History.replaceState() ，能监听到这两个事件就能知道。通过 popstate 事件能解决一半问题，因为 popstate 只会在浏览器前进后退的时候触发，当调用 history.pushState() or history.replaceState() 的时候并不会触发。</p><p>The popstate event is fired when the active history entry changes. If the history entry being activated was created by a call to history.pushState() or was affected by a call to history.replaceState(), the popstate event’s state property contains a copy of the history entry’s state object.</p><p>Note that just calling history.pushState() or history.replaceState() won’t trigger a popstate event. The popstate event will be triggered by doing a browser action such as a click on the back or forward button (or calling。history.back() or history.forward() in JavaScript).</p><p>这里需要通过猴子补丁(Monkeypatch)解决，运行时重写 history.pushState 和 history.replaceState 方法：</p><p><strong>hashHistory</strong></p><p>hashHistory 的实现是基于 hash 的变化，hash 的变化可以通过 hashchange 来监听</p><p>2.1.2 判断URL是否为不同页面</p><p>问题本质是怎么定义一个页面，这里我们无法自动获取，因为不同业务场景定义不同，需要业务方在初始化的时候配置 rules 参数，默认不传入 rules 的情况取 location.pathname 为 key，key 不相同则判断为不同的页面，配置的语法：</p><p><strong>对于页面进入和离开相关事件整理</strong></p><p>2.2 如何监听页面活跃状态切换？</p><p>可以通过 Page Visibility API 以及在 window 上声明 onblur/onfocus 事件来处理。</p><p>2.2.1 Page Visibility API</p><p>一个网页的可见状态可以通过 Page Visibility API 获取，比如当用户 切换浏览器Tab、最小化窗口、电脑睡眠 的时候，系统API会派发一个当前页面可见状态变化的 visibilitychange 事件，然后在事件绑定函数中通过 document.hidden 或者 document.visibilityState 读取当前状态。</p><p>2.2.2 onblur/onfocus</p><p>2.3 什么时机上报数据？</p><p>2.3.1 页面离开时上报</p><p>对于页面刷新或者关闭窗口触发的操作可能会造成数据丢失</p><p>2.3.2 下次打开页面时上报</p><p>会丢失历史访问记录中的最后一个页面数据</p><p>目前采用的方案2，对于单页内部跳转是即时上报，对于单页/多页应用触发 window.onbeforeunload 事件的时候会把当前页面数据暂存在 localStorage 中，当用户下次进入页面的时候会把暂存数据上报。有个细节问题，如果用户下次打开页面是在第二天，对于统计当天的活跃时长会有一定的误差，所以在数据上报的同时会把该条数据的页面进入时间/离开时间带上。</p><h1 id="3-设计"><a href="#3-设计" class="headerlink" title="3.设计"></a>3.设计</h1><p>3.1 UML类关系图</p><p>Tracer</p><p>核心类，用来实例化一个监控，对原生事件和自定义事件的封装，监听 enter activechange exit 事件来操作当前 Page 实例。</p><p>P.S. 取名来自暴雪旗下游戏守望先锋英雄猎空(Tracer)，直译为：追踪者。</p><p>Page</p><p>页面的抽象类，用来实例化一个页面，封装了 enter exit active inactive 等操作，内部通过 state 属性来维护当前页面状态。</p><p><strong>3.2 事件派发关系图</strong></p><h1 id="4-兼容性"><a href="#4-兼容性" class="headerlink" title="4.兼容性"></a><strong>4.兼容性</strong></h1><p><strong>Desktop</strong></p><p>Mobile</p><h1 id="5-思考"><a href="#5-思考" class="headerlink" title="5.思考"></a><strong>5.思考</strong></h1><p>对于页面停留时长的定义可能在不同场景会有差异，比如内部业务系统或者OA系统，产品可能更关心用户在页面的活跃时长；而对于资讯类型的产品，页面可见时长会更有价值。单一的数据对业务分析是有限的，所以在具体的代码实过程中我们会把停留时长分三个指标，这样能更好的帮助产品/运营分析。</p><p>active 页面活跃时长</p><p>visible 页面可见时长 //仅支持Desktop</p><p>duration 页面总停留时长</p><h1 id="6-TODO"><a href="#6-TODO" class="headerlink" title="6.TODO"></a><strong>6.TODO</strong></h1><p>移动端的兼容性目前还没完全覆盖；</p><p>对于页面的配置目前还不够灵活，考虑支持 react-router / vue-router 的配置；</p><p>byted-cg-tracer 待封装；开发中</p><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考"></a><strong>7.参考</strong></h1><p>https&#58;//developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange</p><p>https&#58;//developer.mozilla.org/en-US/docs/Web/Events/popstate</p><p>https&#58;//developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API</p><p>https&#58;//stackoverflow.com/questions/4570093/how-to-get-notified-about-changes-of-the-history-via-history-pushstate</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.cn/group/6563562928828580356/?iid=34137106508&amp;app=news_article&amp;timestamp=1528203173&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">如何精确统计页面停留时长 - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;active页面活跃时长visible页面可见时长//仅支持Desktopduration页面总停留时长6。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="技术" scheme="http://blockshare.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="路由器" scheme="http://blockshare.top/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="技术" scheme="http://blockshare.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>史上最全vue组件库！极速围观 - 今日头条</title>
    <link href="http://blockshare.top/2018/ee828ce9/"/>
    <id>http://blockshare.top/2018/ee828ce9/</id>
    <published>2018-06-04T13:59:00.000Z</published>
    <updated>2018-06-04T13:59:02.121Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>史上最全vue组件库https&#58;//github.com/ElemeFE/element&quot;element饿了么出品的Vue2的webUI工具套件https&#58;//github.com/airyland/vux&quot;Vux基于Vue和WeUI的组件库https&#58;//github.com/</p></blockquote><p><strong>史上最全vue组件库</strong></p><p>https&#58;//github.com/ElemeFE/element” element 饿了么出品的Vue2的web UI工具套件</p><p>https&#58;//github.com/airyland/vux” Vux 基于Vue和WeUI的组件库</p><p>https&#58;//github.com/ElemeFE/mint-ui” mint-ui Vue 2的移动UI元素</p><p>https&#58;//github.com/iview/iview” iview 基于 Vuejs 的开源 UI 组件库</p><p>https&#58;//github.com/JosephusPaye/Keen-UI” Keen-UI 轻量级的基本UI组件合集</p><p>https&#58;//github.com/marcosmoura/vue-material” vue-material 通过Vue Material和Vue 2建立精美的app应用</p><p>https&#58;//github.com/museui/muse-ui” muse-ui 三端样式一致的响应式 UI 库</p><p>https&#58;//github.com/vuetifyjs/vuetify” vuetify 为移动而生的Vue JS 2组件框架</p><p>https&#58;//github.com/wangdahoo/vonic” vonic 快速构建移动端单页应用</p><p>https&#58;//github.com/egoist/eme” eme 优雅的Markdown编辑器</p><p>https&#58;//github.com/monterail/vue-multiselect” vue-multiselect Vue.js选择框解决方案</p><p>https&#58;//github.com/ratiw/vue-table” vue-table-简化数据表格</p><p>https&#58;//github.com/OYsun/VueCircleMenu” VueCircleMenu-漂亮的vue圆环菜单</p><p>https&#58;//github.com/Coffcer/vue-chat” vue-chat-vuejs和vuex及webpack的聊天示例</p><p>https&#58;//github.com/luojilab/radon-ui” radon-ui-快速开发产品的Vue组件库</p><p>https&#58;//github.com/MopTym/vue-waterfall” vue-waterfall-Vue.js的瀑布布局组件</p><p>https&#58;//github.com/myronliu347/vue-carbon” vue-carbon-基于 vue 开发MD风格的移动端</p><p>https&#58;//github.com/FE-Driver/vue-beauty” vue-beauty-由vue和ant design创建的优美UI组件</p><p>https&#58;//github.com/chenz24/vue-blu” vue-blu-帮助你轻松创建web应用</p><p>https&#58;//github.com/taylorchen709/vueAdmin” vueAdmin-基于vuejs2和element的简单的管理员模板</p><p>https&#58;//github.com/vuejs/vue-syntax-highlight” vue-syntax-highlight-Sublime Text语法高亮</p><p>https&#58;//github.com/ElemeFE/vue-infinite-scroll” vue-infinite-scroll-VueJS的无限滚动指令</p><p>https&#58;//github.com/David-Desmaisons/Vue.Draggable” Vue.Draggable-实现拖放和视图模型数组同步</p><p>https&#58;//github.com/surmon-china/vue-awesome-swiper” vue-awesome-swiper-vue.js触摸滑动组件</p><p>https&#58;//github.com/jinzhe/vue-calendar” vue-calendar-日期选择插件</p><p>https&#58;//github.com/pi0/bootstrap-vue” bootstrap-vue-应用于Vuejs2的Twitter的Bootstrap 4组件</p><p>https&#58;//github.com/ElemeFE/vue-swipe” vue-swipe-VueJS触摸滑块</p><p>https&#58;//github.com/ElemeFE/vue-amap” vue-amap-基于Vue 2和高德地图的地图组件</p><p>https&#58;//github.com/apertureless/vue-chartjs” vue-chartjs-vue中的Chartjs的封装</p><p>https&#58;//github.com/hilongjw/vue-datepicker” vue-datepicker-日历和日期选择组件</p><p>https&#58;//github.com/jrainlau/markcook” markcook-好看的markdown编辑器</p><p>https&#58;//github.com/GuillaumeLeclerc/vue-google-maps” vue-google-maps-带有双向数据绑定Google地图组件</p><p>https&#58;//github.com/hilongjw/vue-progressbar” vue-progressbar-vue轻量级进度条</p><p>https&#58;//github.com/alessiomaffeis/vue-picture-input” vue-picture-input-移动友好的图片文件输入组件</p><p>https&#58;//github.com/PeachScript/vue-infinite-loading” vue-infinite-loading-VueJS的无限滚动插件</p><p>https&#58;//github.com/lian-yue/vue-upload-component” vue-upload-component-Vuejs文件上传组件</p><p>https&#58;//github.com/Haixing-Hu/vue-datetime-picker” vue-datetime-picker-日期时间选择控件</p><p>https&#58;//github.com/wangdahoo/vue-scroller” vue-scroller-Vonic UI的功能性组件</p><p>https&#58;//github.com/icai/vue2-calendar” vue2-calendar-支持lunar和日期事件的日期选择器</p><p>https&#58;//github.com/surmon-china/vue-video-player” vue-video-player-VueJS视频及直播播放器</p><p>https&#58;//github.com/Wanderxx/vue-fullcalendar” vue-fullcalendar-基于vue.js的全日历组件</p><p>https&#58;//github.com/ccforward/rubik” rubik-基于Vuejs2的开源 UI 组件库</p><p>https&#58;//github.com/OYsun/VueStar” VueStar-带星星动画的vue点赞按钮</p><p>https&#58;//github.com/egoist/vue-mugen-scroll” vue-mugen-scroll-无限滚动组件</p><p>https&#58;//github.com/mint-ui/mint-loadmore” mint-loadmore-VueJS的双向下拉刷新组件</p><p>https&#58;//github.com/matfish2/vue-tables-2” vue-tables-2-显示数据的bootstrap样式网格</p><p>https&#58;//github.com/Akryum/vue-virtual-scroller” vue-virtual-scroller-带任意数目数据的顺畅的滚动</p><p>https&#58;//github.com/SimonZhangITer/DataVisualization” DataVisualization-数据可视化</p><p>https&#58;//github.com/surmon-china/vue-quill-editor” vue-quill-editor-基于Quill适用于Vue2的富文本编辑器</p><p>https&#58;//github.com/hifarer/Vueditor” Vueditor-所见即所得的编辑器</p><p>https&#58;//github.com/PeakTai/vue-html5-editor” vue-html5-editor-html5所见即所得编辑器</p><p>https&#58;//github.com/ElemeFE/vue-msgbox” vue-msgbox-vuejs的消息框</p><p>https&#58;//github.com/warpcgd/vue-slider” vue-slider-vue 滑动组件</p><p>https&#58;//github.com/Vanthink-UED/vue-core-image-upload” vue-core-image-upload-轻量级的vue上传插件</p><p>https&#58;//github.com/hilongjw/vue-slide” vue-slide-vue轻量级滑动组件</p><p>https&#58;//github.com/JALBAA/vue-lazyload-img” vue-lazyload-img-移动优化的vue图片懒加载插件</p><p>https&#58;//github.com/Alex-fun/vue-drag-and-drop-list” vue-drag-and-drop-list-创建排序列表的Vue指令</p><p>https&#58;//github.com/MatteoGabriele/vue-progressive-image” vue-progressive-image-Vue的渐进图像加载插件</p><p>https&#58;//github.com/vuwe/vuwe” vuwe-基于微信WeUI所开发的专用于Vue2的组件库</p><p>https&#58;//github.com/rowanwins/vue-dropzone” vue-dropzone-用于文件上传的Vue组件</p><p>https&#58;//github.com/hchstera/vue-charts” vue-charts-轻松渲染一个图表</p><p>https&#58;//github.com/weilao/vue-swiper” vue-swiper-易于使用的滑块组件</p><p>https&#58;//github.com/littlewin-wang/vue-images” vue-images-显示一组图片的lightbox组件</p><p>https&#58;//github.com/Wlada/vue-carousel-3d” vue-carousel-3d-VueJS的3D轮播组件</p><p>https&#58;//github.com/QingWei-Li/vue-region-picker” vue-region-picker-选择中国的省份市和地区</p><p>https&#58;//github.com/cngu/vue-typer” vue-typer-模拟用户输入选择和删除文本的Vue组件</p><p>https&#58;//github.com/NewDadaFE/vue-impression” vue-impression-移动Vuejs2 UI元素</p><p>https&#58;//github.com/galenyuan/vue-datatable” vue-datatable-使用Vuejs创建的DataTableView</p><p>https&#58;//github.com/santiblanko/vue-instant” vue-instant-轻松创建自动提示的自定义搜索控件</p><p>https&#58;//github.com/hilongjw/vue-dragging” vue-dragging-使元素可以拖拽</p><p>https&#58;//github.com/NightCatSama/vue-slider-component” vue-slider-component-在vue1和vue2中使用滑块</p><p>https&#58;//github.com/BosNaufal/vue2-loading-bar” vue2-loading-bar-最简单的仿Youtube加载条视图</p><p>https&#58;//github.com/weifeiyue/vue-datepicker” vue-datepicker-漂亮的Vue日期选择器组件</p><p>https&#58;//github.com/hilongjw/vue-video” vue-video-Vue.js的HTML5视频播放器</p><p>https&#58;//github.com/ElemeFE/vue-toast-mobile” vue-toast-mobile-VueJS的toast插件</p><p>https&#58;//github.com/dai-siki/vue-image-crop-upload” vue-image-crop-upload-vue图片剪裁上传组件</p><p>https&#58;//github.com/Akryum/vue-tooltip” vue-tooltip-带绑定信息提示的提示工具</p><p>https&#58;//github.com/weizhenye/vue-highcharts” vue-highcharts-HighCharts组件</p><p>https&#58;//github.com/surmon-china/vue-touch-ripple” vue-touch-ripple-vuejs的触摸ripple组件</p><p>https&#58;//github.com/Kocisov/coffeebreak” coffeebreak-实时编辑CSS组件工具</p><p>https&#58;//github.com/coderdiaz/vue-datasource” vue-datasource-创建VueJS动态表格</p><p>https&#58;//github.com/phoenixwong/vue2-timepicker” vue2-timepicker-下拉时间选择器</p><p>https&#58;//github.com/Bubblings/vue-date-picker” vue-date-picker-VueJS日期选择器组件</p><p>https&#58;//github.com/BosNaufal/vue-scrollbar” vue-scrollbar-最简单的滚动区域组件</p><p>https&#58;//github.com/CroudSupport/vue-quill” vue-quill-vue组件构建quill编辑器</p><p>https&#58;//github.com/phanan/vue-google-signin-button” vue-google-signin-button-导入谷歌登录按钮</p><p>https&#58;//github.com/MMF-FE/vue-svgicon” vue-svgicon-创建svg图标组件的工具</p><p>https&#58;//github.com/bkzl/vue-float-label” vue-float-label-VueJS浮动标签模式</p><p>https&#58;//github.com/Dafrok/vue-baidu-map” vue-baidu-map-基于 Vue 2的百度地图组件库</p><p>https&#58;//github.com/nicolasbeauvais/vue-social-sharing” vue-social-sharing-社交分享组件</p><p>https&#58;//github.com/davidroyer/vue2-editor” vue2-editor-HTML编辑器</p><p>https&#58;//github.com/Ginhing/vue-tagsinput” vue-tagsinput-基于VueJS的标签组件</p><p>https&#58;//github.com/shhdgit/vue-easy-slider” vue-easy-slider-Vue 2.x的滑块组件</p><p>https&#58;//github.com/vue-bulma/datepicker” datepicker-基于flatpickr的时间选择组件</p><p>https&#58;//github.com/miaolz123/vue-chart” vue-chart-强大的高速的vue图表解析</p><p>https&#58;//github.com/yunyi1895/vue-music-master” vue-music-master-vue手机端网页音乐播放器</p><p>https&#58;//github.com/vue-bulma/handsontable” handsontable-网页表格组件</p><p>https&#58;//github.com/F-loat/vue-simplemde” vue-simplemde-VueJS的Markdown编辑器组件</p><p>https&#58;//github.com/myronliu347/vue-popup-mixin” vue-popup-mixin-用于管理弹出框的遮盖层</p><p>https&#58;//github.com/fangyongbao/cubeex” cubeex-包含一套完整的移动UI</p><p>https&#58;//github.com/CroudSupport/vue-fullcalendar” vue-fullcalendar-vue FullCalendar封装</p><p>https&#58;//github.com/loujiayu/vue-material-design” vue-material-design-Vue MD风格组件</p><p>https&#58;//github.com/bbonnin/vue-morris” vue-morris-Vuejs组件封装Morrisjs库</p><p>https&#58;//github.com/tianyong90/we-vue” we-vue-Vue2及weui1开发的组件</p><p>https&#58;//github.com/legeneek/vue-image-clip” vue-image-clip-基于vue的图像剪辑组件</p><p>https&#58;//github.com/jbaysolutions/vue-bootstrap-table” vue-bootstrap-table-可排序可检索的表格</p><p>https&#58;//github.com/wyzant-dev/vue-radial-progress” vue-radial-progress-Vue.js放射性进度条组件</p><p>https&#58;//github.com/staskjs/vue-slick” vue-slick-实现流畅轮播框的vue组件</p><p>https&#58;//github.com/bajian/vue-pull-to-refresh” vue-pull-to-refresh-Vue2的上拉下拉</p><p>https&#58;//github.com/matfish2/vue-form-2” vue-form-2-全面的HTML表单管理的解决方案</p><p>https&#58;//github.com/vue-comps/vue-side-nav” vue-side-nav-响应式的侧边导航</p><p>https&#58;//github.com/mint-ui/mint-indicator” mint-indicator-VueJS移动加载指示器插件</p><p>https&#58;//github.com/vue-bulma/chartjs” chartjs-Vue Bulma的chartjs组件</p><p>https&#58;//github.com/suguangwen/vue-scroll” vue-scroll-vue滚动</p><p>https&#58;//github.com/BosNaufal/vue-ripple” vue-ripple-制作谷歌MD风格涟漪效果的Vue组件</p><p>https&#58;//github.com/icebob/vue-touch-keyboard” vue-touch-keyboard-VueJS虚拟键盘组件</p><p>https&#58;//github.com/ankane/vue-chartkick” vue-chartkick-VueJS一行代码实现优美图表</p><p>https&#58;//github.com/lisiyizu/vue-ztree” vue-ztree-用 vue 写的树层级组件</p><p>https&#58;//github.com/shiye515/vue-m-carousel” vue-m-carousel-vue 移动端轮播组件</p><p>https&#58;//github.com/dai-siki/vue-datepicker-simple” vue-datepicker-simple-基于vue的日期选择器</p><p>https&#58;//github.com/alexqdjay/vue-tabs” vue-tabs-多tab页轻型框架</p><p>https&#58;//github.com/aweiu/vue-verify-pop” vue-verify-pop-带气泡提示的vue校验插件</p><p>https&#58;//github.com/vue-comps/vue-parallax” vue-parallax-整洁的视觉效果</p><p>https&#58;//github.com/JackGit/vue-img-loader” vue-img-loader-图片加载UI组件</p><p>https&#58;//github.com/eduardostuart/vue-typewriter” vue-typewriter-vue组件类型</p><p>https&#58;//github.com/Teddy-Zhu/vue-smoothscroll” vue-smoothscroll-smoothscroll的VueJS版本</p><p>https&#58;//github.com/xinxingyu/vue-city” vue-city-城市选择器</p><p>https&#58;//github.com/weibangtuo/vue-tree” vue-tree-vue树视图组件</p><p>https&#58;//github.com/Treri/vue-ios-alertview” vue-ios-alertview-iOS7+ 风格的alertview服务</p><p>https&#58;//github.com/ibufu/dd-vue-component” dd-vue-component-订单来了的公共组件库</p><p>https&#58;//github.com/yeseason/paco-ui-vue” paco-ui-vue-PACOUI的vue组件</p><p>https&#58;//github.com/doodlewind/vue-cmap” vue-cmap-Vue China map可视化组件</p><p>https&#58;//github.com/steven5538/vue-button” vue-button-Vue按钮组件</p><p>开发框架</p><p>https&#58;//github.com/vuejs/vue” vue.js-流行的轻量高效的前端组件化方案</p><p>https&#58;//github.com/fundon/vue-admin” vue-admin-Vue管理面板框架</p><p>https&#58;//github.com/SimulatedGREG/electron-vue” electron-vue-Electron及VueJS快速启动样板</p><p>https&#58;//github.com/petervmeijgaard/vue-2.0-boilerplate” vue-2.0-boilerplate-Vue2单页应用样板​</p><p>https&#58;//github.com/hanan198501/vue-spa-template” vue-spa-template-前后端分离后的单页应用开发</p><p>https&#58;//github.com/nolimits4web/Framework7-Vue” Framework7-Vue-VueJS与Framework7结合</p><p>https&#58;//github.com/wangxg2016/vue-bulma” vue-bulma-轻量级高性能MVVM Admin UI框架</p><p>https&#58;//github.com/rodzzlessa24/vue-webgulp” vue-webgulp-仿VueJS Vue loader示例</p><p>https&#58;//github.com/Metnew/vue-element-starter” vue-element-starter-vue启动页</p><p><strong>常用vue库</strong></p><p>https&#58;//github.com/vuejs/vuex” vuex-专为 Vue.js 应用程序开发的状态管理模式</p><p>https&#58;//github.com/monterail/vuelidate” vuelidate-简单轻量级的基于模块的Vue.js验证</p><p>https&#58;//github.com/zerqu/qingcheng” qingcheng-qingcheng主题</p><p>https&#58;//github.com/ElemeFE/vue-desktop” vue-desktop-创建管理面板网站的UI库</p><p>https&#58;//github.com/declandewet/vue-meta” vue-meta-管理app的meta信息</p><p>https&#58;//github.com/imcvampire/vue-axios” vue-axios-将axios整合到VueJS的封装</p><p>https&#58;//github.com/cenkai88/vue-svg-icon” vue-svg-icon-vue2的可变彩色svg图标方案</p><p>https&#58;//github.com/eddyerburgh/avoriaz” avoriaz-VueJS测试实用工具库</p><p>https&#58;//github.com/lmk123/vue-framework7” vue-framework7-结合VueJS使用的Framework7组件</p><p>https&#58;//github.com/Coffcer/vue-bootstrap-modal” vue-bootstrap-modal-vue的Bootstrap样式组件</p><p>https&#58;//github.com/QingWei-Li/vuep” vuep-用实时编辑和预览来渲染Vue组件</p><p>https&#58;//github.com/Sopamo/vue-online” vue-online-reactive的在线和离线组件</p><p>https&#58;//github.com/yeyuqiudeng/vue-lazy-render” vue-lazy-render-用于Vue组件的延迟渲染</p><p>https&#58;//github.com/apertureless/vue-password-strength-meter” vue-password-strength-meter-交互式密码强度计</p><p>https&#58;//github.com/lynzz/element-admin” element-admin-支持 vuecli 的 Element UI 的后台模板</p><p>https&#58;//github.com/SimulatedGREG/vue-electron” vue-electron-将选择的API封装到Vue对象中的插件</p><p>https&#58;//github.com/vue-bulma/cleave” cleave-基于cleave.js的Cleave组件</p><p>https&#58;//github.com/cklmercer/vue-events” vue-events-简化事件的VueJS插件</p><p>https&#58;//github.com/iFgR/vue-shortkey” vue-shortkey-应用于Vue.js的Vue-ShortKey 插件</p><p>https&#58;//github.com/kartsims/vue-cordova” vue-cordova-Cordova的VueJS插件</p><p>https&#58;//github.com/weinot/vue-router-transition” vue-router-transition-页面过渡插件</p><p>https&#58;//github.com/mlyknown/vue-gesture” vue-gesture-VueJS的手势事件插件</p><p>https&#58;//github.com/FranckFreiburger/http-vue-loader” http-vue-loader-从html及js环境加载vue文件</p><p>https&#58;//github.com/superman66/vue-qart” vue-qart-用于qartjs的Vue2指令</p><p>https&#58;//github.com/gocanto/vuemit” vuemit-处理VueJS事件</p><p>https&#58;//github.com/icebob/vue-websocket” vue-websocket-VueJS的Websocket插件</p><p>https&#58;//github.com/pinguinjkeke/vue-local-storage” vue-local-storage-具有类型支持的Vuejs本地储存插件</p><p>https&#58;//github.com/gocanto/lazy-vue” lazy-vue-懒加载图片</p><p>https&#58;//github.com/yangmingshan/vue-bus” vue-bus-VueJS的事件总线</p><p>https&#58;//github.com/ropbla9/vue-reactive-storage” vue-reactive-storage-vue插件的Reactive层</p><p>https&#58;//github.com/se-panfilov/vue-notifications” vue-notifications-非阻塞通知库</p><p>https&#58;//github.com/Coffcer/vue-lazy-component” vue-lazy-component-懒加载组件或者元素的Vue指令</p><p>https&#58;//github.com/AStaroverov/v-media-query” v-media-query-vue中添加用于配合媒体查询的方法</p><p>https&#58;//github.com/Akryum/vue-observe-visibility” vue-observe-visibility-当元素在页面上可见或隐藏时检测</p><p>https&#58;//github.com/HerringtonDarkholme/vue-ts-loader” vue-ts-loader-在Vue装载机检查脚本</p><p>https&#58;//github.com/matfish2/vue-pagination-2” vue-pagination-2-简单通用的分页组件</p><p>https&#58;//github.com/dkfbasel/vuex-i18n” vuex-i18n-定位插件</p><p>https&#58;//github.com/David-Desmaisons/Vue.resize” Vue.resize-检测HTML调整大小事件的vue指令</p><p>https&#58;//github.com/xanf/vuex-shared-mutations” vuex-shared-mutations-分享某种Vuex mutations</p><p>https&#58;//github.com/BosNaufal/vue-file-base64” vue-file-base64-将文件转换为Base64的vue组件</p><p>https&#58;//github.com/vue-bulma/modal” modal-Vue Bulma的modal组件</p><p>https&#58;//github.com/irwansyahwii/Famous-Vue” Famous-Vue-Famous库的vue组件</p><p>https&#58;//github.com/LeoHuiyi/leo-vue-validator” leo-vue-validator-异步的表单验证组件</p><p>https&#58;//github.com/MetinSeylan/Vue-Easy-Validator” Vue-Easy-Validator-简单的表单验证</p><p>https&#58;//github.com/imcvampire/vue-truncate-filter” vue-truncate-filter-截断字符串的VueJS过滤器</p><p>https&#58;//github.com/vue-comps/vue-zoombox” vue-zoombox-一个高级zoombox</p><p>https&#58;//github.com/syropian/vue-input-autosize” vue-input-autosize-基于内容自动调整文本输入的大小</p><p>https&#58;//github.com/yodfz/vue-lazyloadImg” vue-lazyloadImg-图片懒加载插件</p><p>服务端</p><p>https&#58;//github.com/nuxt/nuxt.js” nuxt.js-用于服务器渲染Vue app的最小化框架</p><p>https&#58;//github.com/danmademe/express-vue” express-vue-简单的使用服务器端渲染vue.js</p><p>https&#58;//github.com/ccforward/vue-ssr” vue-ssr-非常简单的VueJS服务器端渲染模板</p><p>https&#58;//github.com/hilongjw/vue-ssr” vue-ssr-结合Express使用Vue2服务端渲染</p><p>https&#58;//github.com/leaves4j/vue-easy-renderer” vue-easy-renderer-Nodejs服务端渲染</p><p>辅助工具</p><p>https&#58;//github.com/MiCottOn/DejaVue” DejaVue-Vuejs可视化及压力测试</p><p>https&#58;//github.com/vue-play/vue-play” vue-play-展示Vue组件的最小化框架</p><p>https&#58;//github.com/OYsun/vscode-VueHelper” vscode-VueHelper-目前vscode最好的vue代码提示插件</p><p>https&#58;//github.com/NetanelBasal/vue-generate-component” vue-generate-component-轻松生成Vue js组件的CLI工具</p><p>https&#58;//github.com/xwpongithub/vue-multipage-cli” vue-multipage-cli-简单的多页CLI</p><p>https&#58;//github.com/MetinSeylan/VuejsStarterKit” VuejsStarterKit-vuejs starter套件</p><p><strong>实际开发案例</strong></p><p>应用实例 https&#58;//github.com/phanan/koel” koel-基于网络的个人音频流媒体服务</p><p>https&#58;//github.com/pagekit/pagekit” pagekit-轻量级的CMS建站系统</p><p>https&#58;//github.com/Vuedo/vuedo” vuedo-博客平台</p><p>https&#58;//github.com/jackhutu/jackblog-vue” jackblog-vue-个人博客系统</p><p>https&#58;//github.com/lzxb/vue-cnode” vue-cnode-重写vue版cnode社区</p><p>https&#58;//github.com/ycwalker/CMS-of-Blog” CMS-of-Blog-博客内容管理器</p><p>https&#58;//github.com/mrgodhani/rss-reader” rss-reader-简单的rss阅读器</p><p>https&#58;//github.com/viko16/vue-ghpages-blog” vue-ghpages-blog-依赖GitHub Pages无需本地生成的静态博客</p><p>https&#58;//github.com/wh469012917/swoole-vue-webim” swoole-vue-webim-Web版的聊天应用</p><p>https&#58;//github.com/thelinuxlich/vue-dashing-js” vue-dashing-js-nuvo-dashing-js的fork</p><p>https&#58;//github.com/sapjax/fewords” fewords-功能极其简单的笔记本</p><p>https&#58;//github.com/surmon-china/vue-blog” vue-blog-使用Vue2.0 和Vuex的vue-blog</p><p>Demo示例 https&#58;//github.com/shinygang/Vue-cnodejs” Vue-cnodejs-基于vue重写Cnodejs.org的webapp</p><p>https&#58;//github.com/javaSwing/NeteaseCloudWebApp” NeteaseCloudWebApp-高仿网易云音乐的webapp</p><p>https&#58;//github.com/hilongjw/vue-zhihu-daily” vue-zhihu-daily-知乎日报 with Vuejs</p><p>https&#58;//github.com/useryangtao/vue-wechat” vue-wechat-vue.js开发微信app界面</p><p>https&#58;//github.com/lzxb/vue2-demo” vue2-demo-从零构建vue2 + vue-router + vuex 开发环境</p><p>https&#58;//github.com/liangxiaojuan/eleme” eleme-高仿饿了么app商家详情</p><p>https&#58;//github.com/kenberkeley/vue-demo” vue-demo-vue简易留言板</p><p>https&#58;//github.com/zhengguorong/maizuo” maizuo-vue/vuex/redux仿卖座网</p><p>https&#58;//github.com/codecasts/spa-starter-kit” spa-starter-kit-单页应用启动套件</p><p>https&#58;//github.com/Sioxas/vue-music” vue-music-Vue 音乐搜索播放</p><p>https&#58;//github.com/jiakeqi/douban” douban-模仿豆瓣前端</p><p>https&#58;//github.com/liangxiaojuan/vue-Meizi” vue-Meizi-vue最新实战项目</p><p>https&#58;//github.com/yatessss/zhihudaily-vue” zhihudaily-vue-知乎日报web版</p><p>https&#58;//github.com/lavyun/vue-demo-kugou” vue-demo-kugou-vuejs仿写酷狗音乐webapp</p><p>https&#58;//github.com/SimonZhangITer/VueDemoSellEleme” VueDemoSellEleme-Vue2高仿饿了么外卖平台</p><p>https&#58;//github.com/canfoo/vue2.0-taopiaopiao” vue2.0-taopiaopiao-vue2.0与express构建淘票票页面</p><p>https&#58;//github.com/jiangjiu/vue-leancloud-blog” vue-leancloud-blog-一个前后端完全分离的单页应用</p><p>https&#58;//github.com/yjj5855/node-vue-server-webpack” node-vue-server-webpack-Node.js+Vue.js+webpack快速开发框架</p><p>https&#58;//github.com/wendaosanshou/mi-by-vue” mi-by-vue-VueJS仿小米官网</p><p>https&#58;//github.com/okoala/vue-fis3” vue-fis3-流行开源工具集成demo</p><p>https&#58;//github.com/superman66/vue2.x-douban” vue2.x-douban-Vue2实现简易豆瓣电影webApp</p><p>https&#58;//github.com/ChuckCZC/vue-demo-maizuo” vue-demo-maizuo-使用Vue2全家桶仿制卖座电影</p><p>https&#58;//github.com/iHaPBoy/vue-zhihudaily” vue-zhihudaily-知乎日报 Web 版本</p><p>https&#58;//github.com/liujians/vue-adminLte-vue-router” vue-adminLte-vue-router-vue和adminLte整合应用</p><p>https&#58;//github.com/superman66/vue-axios-github” vue-axios-github-登录拦截登出功能</p><p>https&#58;//github.com/pomelo-chuan/Zhihu-Daily-Vue.js” Zhihu-Daily-Vue.js-Vuejs单页网页应用</p><p>https&#58;//github.com/rokups/hello-vue-django” hello-vue-django-使用带有Django的vuejs的样板项目</p><p>https&#58;//github.com/wszgxa/vue-cnode” vue-cnode-vue单页应用demo</p><p>https&#58;//github.com/CommanderXL/x-blog” x-blog-开源的个人blog项目</p><p>https&#58;//github.com/xrr2016/vue-express-mongodb” vue-express-mongodb-简单的前后端分离案例</p><p>https&#58;//github.com/secreter/websocketchat” websocketchat-基于vue和websocket的多人在线聊天室</p><p>https&#58;//github.com/beidan/photoShare” photoShare-基于图片分享的社交平台</p><p>https&#58;//github.com/cs1707/vue-zhihudaily-2.0” vue-zhihudaily-2.0-使用Vue2.0+vue-router+vuex创建的zhihudaily</p><p>https&#58;//github.com/lin-xin/notepad” notepad-本地存储的记事本</p><p>https&#58;//github.com/elva2596/vueBlog” vueBlog-前后端分离博客</p><p>https&#58;//github.com/hql123/vue-ruby-china” vue-ruby-china-VueJS框架搭建的rubychina平台</p><p>https&#58;//github.com/littlewin-wang/ZhihuDaily” ZhihuDaily-基于Vue和Nodejs的Web单页应用</p><p>https&#58;//github.com/Molunerfinn/vue-koa-demo” vue-koa-demo-使用Vue2和Koa1的全栈demo</p><p>https&#58;//github.com/vincentSea/vue2.x-Cnode” vue2.x-Cnode-基于vue全家桶的Cnode社区</p><p>https&#58;//github.com/shaqihe/life-app-vue” life-app-vue-使用vue2完成多功能集合到小webapp</p><p>https&#58;//github.com/SidKwok/github-explorer” github-explorer-寻找最有趣的GitHub库</p><p>https&#58;//github.com/wenye123/vue-trip” vue-trip-vue2做的出行webapp</p><p>https&#58;//github.com/albertchan/vue-ssr-boilerplate” vue-ssr-boilerplate-精简版的ofvue-hackernews-2</p><p>https&#58;//github.com/nswbmw/vue-bushishiren” vue-bushishiren-不是诗人应用</p><p>https&#58;//github.com/peng1992/houtai” houtai-基于vue和Element的后台管理系统</p><p>https&#58;//github.com/QRL909109/ios7-vue” ios7-vue-使用vue2.0 vue-router vuex模拟ios7</p><p>https&#58;//github.com/tyllo/Framework7-VueJS” Framework7-VueJS-使用移动框架的示例</p><p>https&#58;//github.com/BubblyPoker/cnode-vue” cnode-vue-基于vue和vue-router构建的cnodejs web网站SPA</p><p>https&#58;//github.com/zhoou/vue-cli-multipage-bootstrap” vue-cli-multipage-bootstrap-将vue官方在线示例整合到组件中</p><p>https&#58;//github.com/jiananle/vue-cnode” vue-cnode-用 Vue 做的 CNode 官网</p><p>https&#58;//github.com/GitaiQAQ/HyaReader” HyaReader-移动友好的阅读器</p><p>https&#58;//github.com/xrr2016/zhihu-daily” zhihu-daily-轻松查看知乎日报内容</p><p>https&#58;//github.com/Alex-xd/seeMusic” seeMusic-跨平台云音乐播放器</p><p>https&#58;//github.com/Damonlw/vue-cnode” vue-cnode-使用cNode社区提供的接口</p><p>https&#58;//github.com/moonou/zhihu-daily-vue” zhihu-daily-vue-知乎日报</p><p>https&#58;//github.com/sailengsi/sls-vuex2-demo” sls-vuex2-demo-vuex2商城购物车demo</p><p>https&#58;//github.com/ITCNZ/vue-dropload” vue-dropload-用以测试下拉加载与简单路由</p><p>https&#58;//github.com/soulcm/vue-cnode-mobile” vue-cnode-mobile-搭建cnode社区</p><p>https&#58;//github.com/fishenal/Vuejs-SalePlatform” Vuejs-SalePlatform-vuejs搭建的售卖平台demo</p><p>https&#58;//github.com/Halfeld/v-notes” v-notes-简单美观的记事本</p><p>https&#58;//github.com/BosNaufal/vue-starter” vue-starter-VueJs项目的简单启动页</p><p>https&#58;//github.com/youknowznm/vue-memo” vue-memo-用 vue写的记事本应用</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.cn/group/6562009326855127565/?iid=34137106508&amp;app=news_article&amp;timestamp=1528120669&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">史上最全vue组件库！极速围观 - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;史上最全vue组件库https&amp;#58;//github.com/ElemeFE/element&amp;quot;element饿了么出品的Vue2的webUI工具套件https&amp;#58;//github.com/airyland/vux&amp;quot;Vu
      
    
    </summary>
    
      <category term="技术" scheme="http://blockshare.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="软件" scheme="http://blockshare.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="编程语言" scheme="http://blockshare.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="GitHub" scheme="http://blockshare.top/tags/GitHub/"/>
    
      <category term="文本编辑器" scheme="http://blockshare.top/tags/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="WebApp" scheme="http://blockshare.top/tags/WebApp/"/>
    
  </entry>
  
  <entry>
    <title>用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码） - 今日头条</title>
    <link href="http://blockshare.top/2018/78666272/"/>
    <id>http://blockshare.top/2018/78666272/</id>
    <published>2018-06-04T05:50:06.000Z</published>
    <updated>2018-06-04T05:50:08.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大数据文摘作品编译：Niki、张南星、Shan LIU、Aileen这篇文章让小白也能读懂什么是人们常说的Markov Chain Monte Carlo。</p></blockquote><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/15214429478833e599ece9b" img_width="940" img_height="627" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p><strong>大数据文摘作品</strong></p><p><strong>编译：Niki、张南星、Shan LIU、Aileen</strong></p><p>这篇文章让小白也能读懂什么是人们常说的Markov Chain Monte Carlo。</p><p>在过去几个月里，我在数据科学的世界里反复遇到一个词：马尔可夫链蒙特卡洛（Markov Chain Monte Carlo , MCMC）。在我的研究室、podcast和文章里，每每遇到这个词我都会“不明觉厉”地点点头，觉得这个算法听起来很酷，但每次听人提起也只是有个模模糊糊的概念。</p><p>我屡次尝试学习MCMC和贝叶斯推论，而一拿起书，又很快就放弃了。无奈之下，我选择了学习任何新东西最佳的方法：应用到一个实际问题中。</p><p>通过使用一些我曾试图分析的睡眠数据和一本实操类的、基于应用教学的书（《写给开发者的贝叶斯方法》，我最终通过一个实际项目搞明白了MCMC。</p><p>《写给开发者的贝叶斯方法》</p><p>https&#58;//github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers</p><p><strong>和学习其他东西一样，当我把这些技术性的概念应用于一个实际问题中而不是单纯地通过看书去了解这些抽象概念，我更容易理解这些知识，并且更享受学习的过程。</strong></p><p>这篇文章介绍了马尔可夫链蒙特卡洛在Python中入门级的应用操作，这个实际应用最终也使我学会使用这个强大的建模分析工具。</p><p>此项目全部的代码和数据：</p><p>https&#58;//github.com/WillKoehrsen/ai-projects/blob/master/bayesian/bayesian_inference.ipynb</p><p>这篇文章侧重于应用和结果，因此很多知识点只会粗浅的介绍，但对于那些想了解更多知识的读者，在文章也尝试提供了一些学习链接。</p><blockquote><p><strong>案例简介</strong></p></blockquote><p>我的智能手环在我入睡和起床时会根据心率和运动进行记录。它不是100%准确的，但现实世界中的数据永远不可能是完美的，不过我们依然可以运用正确的模型从这些噪声数据提取出有价值的信息。</p><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/152144294783916730241f0" img_width="318" img_height="300" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>典型睡眠数据</p><p><strong>这个项目的目的在于运用睡眠数据建立一个能够确立睡眠相对于时间的后验分布模型。</strong>由于时间是个连续变量，我们无法知道后验分布的具体表达式，因此我们转向能够近似后验分布的算法，比如马尔可夫链蒙特卡洛（MCMC）。</p><p>选择一个概率分布</p><p>在我们开始MCMC之前，我们需要为睡眠的后验分布模型选择一个合适的函数。一种简单的做法是观察数据所呈现的图像。下图呈现了当我入睡时时间函数的数据分布。</p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/1521442947716d3a76cf533" img_width="800" img_height="328" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>睡眠数据</p><p>每个数据点用一个点来表示，点的密度展现了在固定时刻的观测个数。我的智能手表只记录我入睡的那个时刻，因此为了扩展数据，我在每分钟的两端添加了数据点。如果我的手表记录我在晚上10：05入睡，那么所有在此之前的时间点被记为0（醒着），所有在此之后的时间点记为1（睡着）。这样一来，原本大约60夜的观察量被扩展成11340个数据点。</p><p>可以看到我趋向于在10：00后几分钟入睡，但我们希望建立一个把从醒到入睡的转变用概率进行表达的模型。我们可以用一个简单的阶梯函数作为模型，在一个精确时间点从醒着（0）变到入睡（1），但这不能代表数据中的不确定性。</p><p>我不会每天在同一时间入睡，因此我们需要一个能够模拟出这个个渐变过程的函数来展现变化当中的差异性。在现有数据下最好的选择是logistic函数，在0到1之前平滑地移动。下面这个公式是睡眠状态相对时间的概率分布，也是一个logistic公式。</p><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/1521442947857e07cf293e1" img_width="363" img_height="80" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>在这里，β (beta) 和 α (alpha) 是模型的参数，我们只能通过MCMC去模拟它们的值。下面展示了一个参数变化的logistic函数。</p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/15214429478784e732a18f3" img_width="800" img_height="343" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>一个logistic函数能够很好的拟合数据，因为在logistic函数中入睡的概率在逐渐改变，捕捉了我睡眠模式的变化性。我们希望能够带入一个具体的时间t到函数中，从而得到一个在0到1之间的睡眠状态的概率分布。我们并不会直接得到我是否在10：00睡着了的准确答案，而是一个概率。创建这个模型，我们通过数据和马尔可夫链蒙特卡洛去寻找最优的alpha和beta系数估计。</p><blockquote><p><strong>马尔可夫链蒙特卡洛</strong></p></blockquote><p>马尔可夫链蒙特卡罗是一组从概率分布中抽样，从而建立最近似原分布的函数的方法。因为我们不能直接去计算logistic分布，所以我们为系数(alpha 和 beta)生成成千上万的数值-被称为样本-去建立分布的一个模拟。MCMC背后的基本思想就是当我们生成越多的样本，我们的模拟就更近似于真实的分布。</p><p>马尔可夫链蒙特卡洛由两部分组成。蒙特卡洛代表运用重复随机的样本来获取一个准确答案的一种模拟方法。蒙特卡洛可以被看做大量重复性的实验，每次更改变量的值并观察结果。通过选择随机的数值，我们可以在系数的范围空间，也就是变量可取值的范围，更大比例地探索。下图展示了在我们的问题中，一个使用高斯分布作为先验的系数空间。</p><p><img src="http&#58;//p9.pstatp.com/large/pgc-image/15214429478827d354322a7" img_width="800" img_height="389" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>能够清楚地看到我们不能在这些图中一一找出单个的点，但通过在更高概率的区域（红色）进行随机抽样，我们就能够建立最近似的模型。</p><p>马尔可夫链（Markov Chain）</p><p><strong>马尔可夫链是一个“下个状态值只取决于当前状态”的过程。</strong>（在这里，一个状态指代当前时间系数的数值分配）。一个马尔可夫链是“健忘”的，因为如何到达当前状态并不要紧，只有当前的状态值是关键。如果这有些难以理解的话，让我们来设想一个每天都会经历的情景–天气。</p><p>如果我们希望预测明天的天气，那么仅仅使用今天的天气状况我们就能够得到一个较为合理的预测。如果今天下雪，我们可以观测有关下雪后第二天天气的历史数据去预测明天各种天气状况的可能性。马尔可夫链的定义就是我们不需要知道一个过程中的全部历史状态去预测下一节点的状态，这种近似在许多现实问题中都很有用。</p><p><strong>把马尔可夫链（Markov Chain）和蒙特卡洛（Monte Carlo），两者放到一起，就有了MCMC。</strong>MCMC是一种基于当前值，重复为概率分布系数抽取随机数值的方法。每个样本都是随机的，但是数值的选择也受当前值和系数先验分布的影响。MCMC可以被看做是一个最终趋于真实分布的随机游走。</p><p>为了能够抽取alpha 和 beta的随机值，我们需要为每个系数假设一个先验分布。因为我们没有对于这两个系数的任何假设，我们可以使用正太分布作为先验。正太分布，也称高斯分布，是由均值（展示数据分布），和方差（展示离散性）来定义的。下图展示了多个不同均值和离散型的正态分布。</p><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/1521442947844d29b5be21b" img_width="800" img_height="341" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>具体的MCMC算法被称作Metropolis Hastings。为了连接我们的观察数据到模型中，每次一组随机值被抽取，算法将把它们与数据进行比较。一旦它们与数据不吻合（在这里我简化了一部分内容），这些值就会被舍弃，模型将停留在当前的状态值。</p><p>如果这些随机值与数据吻合，那么这些值就被接纳为各个系数新的值，成为当前的状态值。这个过程会有一个提前设置好的迭代次数，次数越多，模型的精确度也就越高。</p><p>把上面介绍的整合到一起，就能得到在我们的问题中所需进行的最基本的MCMC步骤：</p><ul><li>为logistic函数的系数alpha 和beta选择初始值。- 基于当前状态值随机分配给alpha 和beta新的值。- 检查新的随机值是否与观察数据吻合。如果不是，舍弃掉这个值，并回到上一状态值。如果吻合，接受这个新的值作为当前状态值。- 重复步骤2和3（重复次数提前设置好）。- 这个算法会给出所有它所生成的alpha 和beta值。我们可以用这些值的平均数作为alpha 和beta在logistic函数中可能性最大的终值。MCMC不会返回“真实”的数值，而是函数分布的近似值。睡眠状态概率分布的最终模型将会是以alph和beta均值作为系数的logistic函数。<br>基于当前状态值随机分配给alpha 和beta新的值。</li></ul><p>重复步骤2和3（重复次数提前设置好）。</p><blockquote><p><strong>Python实施</strong></p></blockquote><p>我再三思考模拟上面提到的细节，最终我开始用Python将它们变成现实。观察一手的结果会比阅读别人的经验贴有帮助得多。<strong>想要在Python中实施MCMC，我们需要用到PyMC3贝叶斯**</strong>库，**它省略了很多细节，方便我们创建模型，避免迷失在理论之中。</p><p>通过下面的这些代码可以创建完整的模型，其中包含了参数alpha 、beta、概率p以及观测值observed，step变量是指特定的算法，sleep_trace包含了模型创建的所有参数值。</p><p>为了更直观地展现代码运行的效果，我们可以看一下模型运行时alpha和beta生成的值。</p><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/152144294770878de7432dc" img_width="800" img_height="396" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>这些图叫做轨迹图，可以看到每个状态都与其历史状态相关，即马尔可夫链；同时每个值剧烈波动，即蒙特卡洛抽样。</p><p>使用MCMC时，常常需要放弃轨迹图中90%的值。这个算法并不能立即展现真实的分布情况，最初生成的值往往是不准确的。随着算法的运行，后产生的参数值才是我们真正需要用来建模的值。我使用了一万个样本，放弃了前50%的值，但真正在行业中应用时，样本量可达成千上万个、甚至上百万个。</p><p>通过足够多的迭代，MCMC逐渐趋近于真实的值，但是估算收敛性并不容易。这篇文章中并不会涉及到具体的估算方法（方法之一就是计算轨迹的自我相关性），但是这是得到最准确结果的必要条件。PyMC3的函数能够评估模型的质量，包括对轨迹、自相关图的评估。</p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/1521442947696725da0b212" img_width="600" img_height="196" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>轨迹图（左）和自相关性图（右）</p><blockquote><p><strong>睡眠模型</strong></p></blockquote><p>建模、模型运行完成后，该最终结果上场了。我们将使用最终的5000个alpha和beta值作为参数的可能值，最终创建了一个单曲线来展现事后睡眠概率：</p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/1521442947820f9f14f1aed" img_width="800" img_height="330" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>基于5000个样本的睡眠概率分布</p><p>这个模型能够很好的代表样本数据，并且展现了我睡眠模式的内在变异性。<strong>这个模型给出的答案并不是简单的“是”或“否”</strong>，而是给我们一个概率。举个例子，我们可以通过这个模型找出我在特定时间点睡觉的概率，或是找出我睡觉概率超过50%的时间点：</p><p>虽然我希望在晚上10点入睡，但很明显大多时候并不是这样。我们可以看到，平均来看，我的就寝时刻是在晚上10&#58;14。</p><p>这些值是基于样本数据的最有可能值，但这些概率值都有一定的不确定性，因为模型本身就是近似的。为了展现这种不确定性，我们可以使用所有的alpha、beta值来估计某个时间点的睡觉概率，而不是使用平均值，并且把这些概率值展现在图中。</p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/15214429478201ba810ac31" img_width="600" img_height="313" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>晚上10&#58;00睡觉的概率分布</p><p><strong>这些结果能够更好地展现MCMC模型真正在做的事情，即它并不是在寻找单一的答案，而是一系列可能值。</strong>贝叶斯推论在现实世界中非常有用，因为它是对概率进行了预测。我们可以说存在一个最可能的答案，但其实更准确的回复应当是：每个预测都有一系列的可能值。</p><p>起床模型</p><p>同样我可以用我的起床数据创建类似的模型。我希望能够在闹钟的帮助下总能在早上6&#58;00起床，但实际上并不如此。下面这张图展现了基于观测值我起床的最终模型：</p><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/152144294782811a304a59c" img_width="800" img_height="325" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>基于5000个样本的起床事后概率</p><p>可以通过模型得出我在某个特定时间起床的概率，以及我最有可能起床的时间：</p><p>看来我需要一个更生猛的闹钟了….</p><blockquote><p><strong>睡眠的时间</strong></p></blockquote><p>出于好奇以及实践需求，最后我想创建的模型是我的睡眠时间模型。首先，我们需要寻找到一个描述数据分布的函数。事先，<strong>我认为应该是正态函数，但无论如何我们需要用数据来证明。</strong></p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/152144294774222e77cbfc4" img_width="629" img_height="503" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>睡眠时间长短分布</p><p>正态分布的确能够解释大部分数据，但是图中右侧的异常值却无法得到解释（当我睡懒觉的时候）。<strong>我们可以用两个单独的正态分布来代表两种模式，但我要用偏态分布。</strong>偏态分布有三个参数：平均值、偏离值，以及alpha倾斜值。这三个参数的值都需要从MCMC算法中得到。下面的代码创建了模型，并且使用了Metropolis Hastings抽样。</p><p>现在，我们可以使用三个参数的平均值来建立最有可能的分布模型了。下图为基于数据的最终偏态分布模型。</p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/15214429478367a1340b800" img_width="632" img_height="503" alt="用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码）" inline="0"></p><p>时长模型</p><p>模型看上去很完美！<strong>通过模型可以找出我至少睡多长时长的可能性，以及我最经常的睡觉时长：</strong></p><blockquote><p><strong>结论</strong></p></blockquote><p>我想再次强调，完成这个项目让我体会到解决问题的重要性，尤其是有现实应用意义的项目！在我尝试使用马尔可夫链蒙特卡洛来端到端建立贝叶斯推论的时候，我重新熟悉了许多基础知识，并且非常享受这个过程。</p><p>我不仅了解到自身需要改进的习惯，而且当别人在谈论MCMC和贝叶斯推论时，我终于真的明白他们在谈论什么了！数据科学正是关于持续不断地在你自己的知识库中输入新的工具，而这最有效的办法就是发现一个问题，然后应用你所学的去解决问题！</p><p>原文链接：</p><p>https&#58;//towardsdatascience.com/markov-chain-monte-carlo-in-python-44f7e609be98</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.cn/group/6534548014936097293/?iid=34137106508&amp;app=news_article&amp;timestamp=1528091385&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">用Python入门不明觉厉的马尔可夫链蒙特卡罗（附案例代码） - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;大数据文摘作品编译：Niki、张南星、Shan LIU、Aileen这篇文章让小白也能读懂什么是人们常说的Markov Chain Monte Carlo。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http&amp;#58;//p1.
      
    
    </summary>
    
      <category term="技术" scheme="http://blockshare.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编程语言" scheme="http://blockshare.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://blockshare.top/tags/Python/"/>
    
      <category term="机器学习" scheme="http://blockshare.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="http://blockshare.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="睡眠" scheme="http://blockshare.top/tags/%E7%9D%A1%E7%9C%A0/"/>
    
  </entry>
  
  <entry>
    <title>一文读懂CNN如何用于NLP - 为程序员服务</title>
    <link href="http://blockshare.top/2018/fe7b6758/"/>
    <id>http://blockshare.top/2018/fe7b6758/</id>
    <published>2018-06-04T02:24:41.000Z</published>
    <updated>2018-06-04T02:24:41.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一文读懂CNN如何用于NLP - 为程序员服务</p></blockquote><h2 id="一文读懂CNN如何用于NLP-为程序员服务"><a href="#一文读懂CNN如何用于NLP-为程序员服务" class="headerlink" title="一文读懂CNN如何用于NLP - 为程序员服务"></a>一文读懂CNN如何用于NLP - 为程序员服务</h2><blockquote><p><strong>转载来源</strong>：<a href="http://ju.outofmemory.cn/entry/341777" target="_blank" rel="noopener">一文读懂CNN如何用于NLP - 为程序员服务</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一文读懂CNN如何用于NLP - 为程序员服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一文读懂CNN如何用于NLP-为程序员服务&quot;&gt;&lt;a href=&quot;#一文读懂CNN如何用于NLP-为程序员服务&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>兔妈妈把土抛开，地下钻出一群兔宝宝，好有爱啊！ - 今日头条</title>
    <link href="http://blockshare.top/2018/7bae2e03/"/>
    <id>http://blockshare.top/2018/7bae2e03/</id>
    <published>2018-06-02T10:52:50.000Z</published>
    <updated>2018-06-02T10:52:51.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>兔妈妈把土抛开，地下钻出一群兔宝宝，好有爱啊！</p></blockquote><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaoimg.cn/group/6562349471894602253/?iid=34137106508&amp;app=news_article&amp;timestamp=1527936630&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">兔妈妈把土抛开，地下钻出一群兔宝宝，好有爱啊！ - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;兔妈妈把土抛开，地下钻出一群兔宝宝，好有爱啊！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转载来源&lt;/strong&gt;：&lt;a href=&quot;http://m.toutiaoimg.cn/group/656234
      
    
    </summary>
    
      <category term="视频" scheme="http://blockshare.top/categories/%E8%A7%86%E9%A2%91/"/>
    
    
  </entry>
  
  <entry>
    <title>左晖“进化论”：贝壳或将淘汰链家？ - 今日头条</title>
    <link href="http://blockshare.top/2018/63e52723/"/>
    <id>http://blockshare.top/2018/63e52723/</id>
    <published>2018-06-01T18:35:18.000Z</published>
    <updated>2018-06-01T18:35:24.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>4月底在成都闭门举行的一场地产公司董事长年会上，万科董事局主席郁亮、万科创始人王石、原华远地产集团董事长任志强等房企老总坐在台下，台上的链家集团董事长左晖抛出了一个观点。</p></blockquote><blockquote><p> 运动员能当裁判员吗？</p></blockquote><p>4月底在成都闭门举行的一场地产公司董事长年会上，万科董事局主席郁亮、万科创始人王石、原华远地产集团董事长任志强等房企老总坐在台下，台上的链家集团董事长左晖抛出了一个观点：理论上中国城镇人口的住宅问题，已经基本得到解决。 </p><p>言下之意，盖房子已经不再是中国房地产行业的主题。这不是左晖第一次当着一众房企老板的面看空新房交易市场。他的底气来自于链家在存量房租赁及交易市场上庞大的交易额规模。 </p><p>根据链家研究院披露的数据，链家网GMV（Gross Merchandise Volume,网站成交金额）在2016年、2017年均超过万亿元人民币，跟电商巨头相比，这一数据接近京东，仅次于阿里巴巴。 </p><p>2001年，链家地产的第一家门店创立于北京，30岁的左晖还是北漂租房一族；2018年，链家已经入驻全国36城，开店8000余家，下辖经纪人超过20万，集团公司估值逾400亿元，左晖个人持股对价超过150亿元。 </p><p>靠保险销售赚到第一桶金的左晖，在链家将满18岁这一年，出人意料地开始了另一场“冒险”——转型做平台。2018年4月底，他忙于在链家集团内部推动一场自上而下、全员参与的二次创业。 </p><p>据时间财经了解，多名链家高管被抽调至线上新平台“贝壳找房”，链家城市级管理人员则被提拔为区省级，部分链家直营店的基层经纪人逐渐向集团旗下负责加盟业务的德佑地产流转。 </p><p>左晖似乎正在“分解”链家：高管去了贝壳，基层经纪人去了德佑。链家集团CFO魏勇几乎是唯一不受影响的核心高管，他向时间财经介绍，他仍在集团负责链家的财务，分管金融业务，但对公司上市对赌的传闻未予置评，“上市的事还是以左总的表态为准。”时间财经发现，此前拨通过的左晖的电话号码被呼叫转移到公关秘书的手机上。 </p><p>取代链家网、囊括链家核心人力资源，“贝壳找房”要做什么？ </p><p>德佑地产的COO祁世钊是集团人事巨变后第一个对外发声的链家核心高管。他对媒体表示，58实际是信息发布平台，贝壳不止有信息发布，还要能形成闭环。 </p><p>早在“贝壳找房”上线之前，左晖已将链家定义为“互联网公司”。但房产经纪行业市盈率PE的平均水平能容下400亿元的庞大链家吗？更何况，贝壳找房要精准找到对手和朋友也非易事。在这种情况下，左晖对链家进行手术刀式的改革又有多少胜算？ </p><h1 id="转型先兆？"><a href="#转型先兆？" class="headerlink" title="转型先兆？"></a><strong>转型先兆？</strong></h1><p>“撤店了，但我还在链家，我们之间的委托合同还是有效的。”2018年春节假期过后，来自河南的房产经纪人马小凤接到了多位老客户的电话，她没有返回北京五环外北苑中街的链家门店上班，这家营业部被关闭，取而代之入驻的是一家不知名的小中介。 </p><p>北京热点租房区域集中在五环外，第三方数据监测机构“林克艾普”在2017年11月公布的数据显示，立水桥－北苑是北京租房客最为集中的区域，12.87%的北京租客在此居住。同时，这一区域也是北京二手房交易热点楼盘的集中区。 </p><p>但时间财经走访发现，2017年9月至今，链家至少已经关闭了该热点区域的3家门店，将员工分流到临近的门店。在北京，一些被关闭的链家门店紧接着由竞争对手“抢驻”。其中，不乏麦田房产、我爱我家这类直接竞争者。 </p><p>链家罕见收缩的消息早前就不翼而飞。2017年年中，网络上流传链家在北京将关店300家，上海、成都、重庆等地链家关店、员工离职潮的消息。链家官方回应称，北京关店数量是87家，目的是优化店面管理。</p><p>本能的疑问是，扩张时期经过咨询论证后精准选址的链家门店，有的已经精耕周边社区多年。左晖为什么要主动让出链家的部分地盘？ </p><p>最直接的原因是二手房交易行情下行的大趋势。2017年楼市在调控强监管政策下，全国多个大中城市出台了被称为史上最强、最严的限购、限贷政策，这导致二手房交易量持续萎缩，中介公司和经纪人进入行业“寒冬”，一线城市正是链家直营门店布局的重点。 </p><p>以北京为例，据云房网数据显示，2017年3月17日“认房又认贷”等一系列调控政策发布后，活跃中介机构（指当月有二手住宅成交记录的中介机构）数量一路走跌，10月最低仅为246家。2018年略有反弹，但3月也仅有281家，去年同期的数字则是523家。 </p><p>存量房租赁和交易市场中还隐藏着太多不确定性。除了政策变化，互联网端口费的提价也是动态风险之一。2018年一季度，58集团单方面宣布提高房源线上端口费，引发链家、我爱我家、麦田房产等多家中介公司的联合抵制。北京链家最为激进，一度下架了其在58同城和安居客上的所有房源。 </p><p>这不是58系第一次单方面涨价，其在存量房线上交易流量上具有一定的垄断定价权。我爱我家副总裁胡景晖曾对时间财经表示，我爱我家端口投放的60%-70%都在58集团，麦田房产可能也高达60%，链家相对较小一些。 </p><p>时间财经此前曾独家报道（详情见《58系向房产中介联盟妥协 房源端口费大提价落空》），58集团向中介联盟妥协，涨价计划最终落空。但市场占有率如链家这般稳固，也难以获得线上端口费的议价权。8000家门店、20万经纪人——链家拥有中介市场上规模最庞大的线下团队，这也意味着日费斗金且仍将持续上涨的经营成本。 </p><p>还有一个容易被忽略的问题，链家集团并购德佑地产、入股21世纪不动产等多家中介公司，链家网被定义为开放平台，其线上房源端口供所有链家系中介共享，这直接影响了链家直营店经纪人的收入。 </p><p>“链家旗下经纪人代理同一个小区的房源，但别的中介佣金比链家直营要低，客户就流失到他们那边了。”在北京链家工作五年多的马小凤向时间财经抱怨，“从集团的角度可能是多赚了一些，但对链家直营的经纪人来说很不公平。” </p><p>这种内部竞争的利弊也是左晖必须权衡的问题。一位接近链家决策层的人士告诉时间财经，左晖的态度越来越决绝，“他传递给外界的信息是，链家不能停在中介公司层面，非做平台不可了。” </p><h1 id="四面树敌"><a href="#四面树敌" class="headerlink" title="四面树敌 "></a><strong>四面树敌 </strong></h1><p>2018年5月5日，左晖在一场创业者闭门课堂上发表演讲时表示，链家与同行早已不在一个时代。两周后的5月18日，链家集团召开战略会议，宣布了一系列堪称“动荡”的重大人事调整。 </p><p>4月刚刚成立的新平台“贝壳找房”被定义为链家集团的战略核心，链家集团CEO彭永东同时担任贝壳找房CEO，原成都链家总经理徐万刚担任贝壳找房大中华北区COO，原深圳链家总经理张海明担任贝壳大中华南区COO。 </p><p>时间财经了解到，在集团层面，链家网的技术团队也转移到贝壳体系，左晖一向看重的校园招聘业务也将在2019年转到贝壳体系。在分公司层面，链家直营的城市经理调任到贝壳城市经理，直营管理层出现大量岗位空缺，一部分区域、门店经理得以晋升。 </p><p>落到具体的目标数字上，左晖更是野心勃勃。据4月23日贝壳找房上线发布会上彭永东的介绍，贝壳找房将覆盖全中国超过300个城市，服务超过2亿的社区家庭，连接100万职业经纪人和10万家门店，赋能超过100个品牌，规模将数倍于目前的链家。 </p><p>必须要提醒的是，没有上市时间表是左晖一贯的表态。纵观资本市场，房产经纪公司的估值普遍较低，这也是链家不急于IPO而急于转型互联网平台的背景之一。 </p><p>时间财经梳理市场公开数据发现，A股市场的房产经纪公司中，我爱我家2017年借助昆百大A登陆A股时市盈率PE是13.1倍，世联行在2017年的平均市盈率PE是26.35倍；美股市场上，类似链家、我爱我家的房产经纪公司Redfin市盈率PE仅为9.57倍。 </p><p>由链家直营转向贝壳开放平台的“高管大挪移”公开后，留在上海掌管德佑地产的祁世钊是第一个公开发声的链家核心人物。他曾表示，贝壳不只是要做类似58系的信息发布平台，更希望做服务平台，形成闭环。整体战略角度看，链家和德佑都是商户，都将入驻贝壳平台。 </p><p>对于左晖力推的贝壳平台，市场上成熟的房产经纪平台型公司反应各不相同。</p><p>有传闻称，58集团旗下安居客成立“打贝办”，他们警告中介经纪人：安居客的房源一旦在贝壳找房出现，将进行下架处理。但安居客方面对时间财经否认了这一消息。 </p><p>老对手搜房网尚未对“贝壳找房”形成警惕感和危机感。一位不愿具名的搜房网高管为时间财经找出了一张链家集团在2014年发布的声明。声明称，北京链家全面终止同搜房网的合作，理由之一是搜房网已经变成一家中介公司，已经把原部分端口销售团队转为经纪人并开始在各经纪公司挖人，成为链家的竞争对手。 </p><p>“当初做平台的搜房网去做中介，链家反对。如今做中介的链家去搞开放平台，其他中介会支持？”中原地产首席分析师张大伟对时间财经说：“既要当运动员，又要当裁判员，行业内很难获得接受和认可。” </p><h1 id="谁的贝壳？"><a href="#谁的贝壳？" class="headerlink" title="谁的贝壳？ "></a><strong>谁的贝壳？ </strong></h1><p>更令人担忧的是，无论“贝壳”成败与否，链家直营或将不复存在。 </p><p>时间财经从贝壳找房试点城市郑州了解到，按照最新的收益分配模式，链家独家采集归纳的真房源楼盘字典被共享，所有房源在贝壳平台对所有经纪人开放，经纪人得到房源的委托、对房源的拍照、对客户的吸纳、提供成交后的服务都会形成相应业绩，系统会将最终成交经纪人佣金中的对应部分划归到不同的贡献人账户。 </p><p>尽管这一模式具有行业创新性和颠覆性，但对于马小凤这样链家直营店的经纪人，此前的竞争优势荡然无存。“如果是这样的模式，我不会再做直营，还不如到其他中介，起码要去有底薪的地方。”马小凤说。 </p><p>她只是这样想，一些同行已经这样做了。时间财经了解到，链家直营面临瓦解的风险，长三角一线城市的链家直营经纪人已经有部分转到德佑加盟店甚至自办中介公司，下沉到二三线城市。也就是说，左晖或将面临一个尴尬的局面：无论贝壳成败，链家直营都有可能不复存在。 </p><p>部分业内人士表示，贝壳体系的意图之一是让链家同化甚至兼并小型房产中介公司，增加市场占有率以达到垄断地位。但我爱我家集团董事长谢勇此前曾公开表示，综合全国来看，头部公司能占到20%就已经很不错了，这个行业太过分散。目前全国最大的链家只占了10个点，单个城市的行业集中度可能出现了三分天下、五分天下，但是头部公司也只占到50%。“还有大量的夫妻店存在，开在社区门口，你不可能把这些门店消灭掉。” </p><p>时间财经了解到，尽管贝壳找房目前不收取线上端口费，但我爱我家、中原地产、麦田房产等多家连锁型房产中介公司都暂时没有将房源上传至贝壳的计划。普遍的疑虑大致集中在：链家系和非链家系的经纪人是否将被区别对待？贝壳究竟是谁的贝壳？ </p><p>谁的贝壳？这一问题在链家集团组织架构方面也同样扑朔迷离。工商登记信息显示，“贝壳找房”官方网站的注册主体公司是天津小屋信息科技有限公司，与链家网、德佑地产、链家地产等链家集团的子公司不同的是，这是一家注册成立于2017年11月的初创企业，左晖持股94.38%，链家联合创始人单一刚持股5.62%。与注册主体相反，贝壳找房的员工合同仍在链家地产或链家网一边，尚未转签。 </p><p>链家IPO后与贝壳重组，还是两者分拆独立上市？目前仍是未知。唯一可以确定是，集团董事会上，面对融创中国的孙宏斌、万科的刘肖、华兴资本的包凡甚至是腾讯的马化腾以及百度的李彦宏，左晖和他的管理层持股团队仍然掌握话语权。穿透股权结构，左晖直接及间接对链家集团的持股接近50%。 </p><p>吸纳来自万科、融创等股东的B轮融资之后，早期投资左晖和链家的财务投资人已经基本套现退出。时间财经获得的一份链家地产B轮融资计划书显示，2016年4月的这轮融资中，老股转让28.8亿元，占比为45%。鼎晖资本和复兴集团的押注获得了回报，不差钱的左晖是否选对了链家未来发展壮大的战略股东呢？ </p><p>事实上，链家获得股东们的战略资源支持并不多。目前，链家与股东之间最为直接的战略合作是，京东金融的白条租房与链家的自如公寓打通，租客可以申请分期付款。不过，一位前京东金融高管告诉时间财经，自如寓和京东金融的合作不具备同业排他性，“京东白条本身是一个开放的金融场景，与多家长租公寓运营商都有合作。” </p><p>值得一提是，作为链家战略股东之一的腾讯只给了资金，并未提供核心资源。</p><p>当左晖选择腾讯投资的那一刻，也就意味着他站在了阿里的对面——目前，支付宝的信用租房平台已经进入南京、上海、北京、深圳、杭州、成都、西安、郑州八个城市，主打真房源、免押金和房租月付。 </p><p>从美股市场私有化的易居中国则可能成为贝壳找房的最直接竞争对手。该公司看重房产交易市场，已经启动“易居房友”项目，目标是做聚拢经纪人的基础交易平台。 </p><p>颇具玩味的是，易居中国成为贝壳的对手，那也意味着左晖当初没有吸纳的这些缺乏互联网基因的股东，将成为竞争对手的强大后盾。时间财经了解到，2016年5月，包括恒大在的多家房企都曾表达了参投链家B轮融资的意向，左晖最终只选择了万科和融创。在链家之后启动融资的易居中国拿到了恒大、碧桂园、富力地产等24家头部开发商的战投。 </p><p>内忧外患之中，左晖能否顺利完成这场链家历史上最大规模的变革？时间将给出答案。（北京时间财经 岳嘉）</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.cn/group/6562046363050181133/?iid=34137106508&amp;app=news_article&amp;timestamp=1527878016&amp;article_category=stock&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">左晖“进化论”：贝壳或将淘汰链家？ - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;4月底在成都闭门举行的一场地产公司董事长年会上，万科董事局主席郁亮、万科创始人王石、原华远地产集团董事长任志强等房企老总坐在台下，台上的链家集团董事长左晖抛出了一个观点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 运动员
      
    
    </summary>
    
      <category term="房产" scheme="http://blockshare.top/categories/%E6%88%BF%E4%BA%A7/"/>
    
    
      <category term="购房" scheme="http://blockshare.top/tags/%E8%B4%AD%E6%88%BF/"/>
    
      <category term="华远地产" scheme="http://blockshare.top/tags/%E5%8D%8E%E8%BF%9C%E5%9C%B0%E4%BA%A7/"/>
    
      <category term="我爱我家" scheme="http://blockshare.top/tags/%E6%88%91%E7%88%B1%E6%88%91%E5%AE%B6/"/>
    
      <category term="链家地产" scheme="http://blockshare.top/tags/%E9%93%BE%E5%AE%B6%E5%9C%B0%E4%BA%A7/"/>
    
      <category term="二手房" scheme="http://blockshare.top/tags/%E4%BA%8C%E6%89%8B%E6%88%BF/"/>
    
  </entry>
  
  <entry>
    <title>老司机回答药品到底能卖多少的相关问题</title>
    <link href="http://blockshare.top/2018/5c4069d3/"/>
    <id>http://blockshare.top/2018/5c4069d3/</id>
    <published>2018-06-01T15:31:11.000Z</published>
    <updated>2018-06-01T15:31:11.866Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>医药魔方</p></blockquote><blockquote><p><strong>转载来源</strong>：<a href="http://mp.weixin.qq.com/s?__biz=MzA4MDA4MTIzMg==&amp;mid=2653055855&amp;idx=2&amp;sn=62431e795706219b63afb38a8836ca18&amp;chksm=847f7350b308fa46efab76a41bd20d540492e94787873e332e2f2f258b553eb5cb4252a5762a&amp;mpshare=1&amp;scene=1&amp;srcid=0601Pzq0PO8xbV7xolELwtsr#rd" target="_blank" rel="noopener">老司机回答药品到底能卖多少的相关问题</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;医药魔方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转载来源&lt;/strong&gt;：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MDA4MTIzMg==&amp;amp;m
      
    
    </summary>
    
    
      <category term="医药魔方数据" scheme="http://blockshare.top/tags/%E5%8C%BB%E8%8D%AF%E9%AD%94%E6%96%B9%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>AI寒冬将至？「人工智能衰退论」再起，却遭LeCun怒斥 - 今日头条</title>
    <link href="http://blockshare.top/2018/2876e19b/"/>
    <id>http://blockshare.top/2018/2876e19b/</id>
    <published>2018-06-01T11:03:14.000Z</published>
    <updated>2018-06-01T11:03:15.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如GeoffHinton、吴恩达、YanLeCun、李飞飞、GaryMarcus等，并以「谷歌、Facebook等公司对AI的研究兴趣正在衰退」作为论据。</p></blockquote><blockquote><p>《AI Winter is Well on its Way》是计算机视觉和 AI 领域专家 Filip Piekniewski 所写的一篇文章，文中提到了很多深度学习顶级研究者的观点，如 Geoff Hinton、吴恩达、Yan LeCun、李飞飞、Gary Marcus 等，并以「谷歌、Facebook 等公司对 AI 的研究兴趣正在衰退」作为论据。本文主要涉及「深度学习蒙尘」、对深度学习扩展能力和自动驾驶的讨论、对该领域炒作的批判，最终结论是 AI 寒冬必将到来。对此，Yann LeCun 认为这篇文章「very uninformed」，并列出了几点理由。</p></blockquote><p>近日，一篇名为《AI Winter is Well on its Way》的文章刷屏了（嗯哼，即将刷屏，微笑），对此 Yan Lecun 的评价是：</p><blockquote><p>这篇文章非常无知。Facebook、谷歌、微软等企业近期增加了他们在 AI 方面的努力。Facebook 现在拥有一个专注于 AI 研究的大型组织，还有人工智能副总裁。微软事业部的名称里就有「AI」（而没有提到「Windows」或「Office」）。谷歌将其整个研究组织重命名为「Google AI」。这三家公司在雇佣 AI 科学家和工程师方面一直在加速。目前来看并没有平台期或者减速现象。</p></blockquote><p>《AI Winter is Well on its Way》究竟在讲什么呢？机器之心对该文章进行了编译介绍：</p><p>近几年来，深度学习一直处于所谓「人工智能革命」的前沿，许多人认为，正是这颗银色的子弹将把我们带到技术奇点的神奇世界（通用人工智能）。很多企业在 2014、2015 和 2016 年进行了多次押注，当时人工智能还有一些新的进展，如 AlphaGo 等。特斯拉等公司宣布，人类距离全自动驾驶汽车已近在咫尺，特斯拉甚至已经开始向客户推销这一概念，以便未来的软件更新能够将其实现。</p><p>现在已到 2018 年中，情况已经发生了变化，虽然表面上还看不出来。NIPS 会议仍被过度炒作，企业公关的新闻稿中仍然充斥着人工智能，马斯克依然承诺制造自动驾驶汽车，谷歌 CEO 不断重复吴恩达的口号——「人工智能的影响大于电力」（AI is bigger than electricity）。但这种表述开始出现漏洞。正如我在之前的文章（https&#58;//blog.piekniewski.info/2016/11/15/ai-and-the-ludic-fallacy/）中所预测的那样，最明显的漏洞是自动驾驶这一技术在现实世界中的实际应用。</p><p><strong>深度学习蒙尘</strong></p><p>当 ImageNet 问题得到有效解决（注意，这并不意味着视觉问题得到解决），该领域的许多著名研究人员（甚至包括一贯低调的 Geoff Hinton）都在积极地接受新闻采访，在社交媒体上发表文章（如 Yann LeCun、吴恩达、李飞飞）。总的来说，我们正面临着一场巨大的革命，从现在开始，一切只能加速。几年过去，这些人的 Twitter feeds 变得不那么活跃了，以吴恩达的 Twtter 为例：</p><blockquote><p>2013 年：每天 0.413 条推文2014 年：每天 0.605 条推文2015 年：每天 0.320 条推文2016 年：每天 0.802 条推文2017 年：每天 0.668 条推文2018 年：每天 0.263 条推文（截至 5 月 24 日）</p></blockquote><p>或许这是因为吴恩达骇人的主张现在受到了社区更多的审视，如以下推文所示：</p><p>很明显，人气已经大幅下滑，称赞深度学习是终极算法的推特少之又少，论文不再那么具有颠覆性，而是被视为一种发展演变。自从发布 AlphaGo Zero 以后，DeepMind 再也没有什么突破性进展，即使是 AlphaGo Zero 也没有那么令人兴奋，因为只需要大量的计算，而且只适用于游戏（参见莫拉维克悖论）。OpenAI 相当安静，他们最后一篇爆款文章是《Dota 2》（我想这一突破应该会像 AlphaGo 一样引起轰动，但却很快就销声匿迹了）。实际上，有文章甚至称谷歌也不知道该如何处理 DeepMind，因为它们的结果显然不像原来预期的那样实际……著名的研究人员一般都是去加拿大或法国与政府官员会面，以争取未来的资助，Yann LeCun 甚至从 Facebook 研究负责人的位置退了下来，成为首席人工智能科学家（颇具象征意义）。从有钱的大公司到政府资助机构的逐渐转变让我觉得，其实这些公司（我想到了谷歌和 Facebook）对这类研究的兴趣正在慢慢消退。这些都是早期的迹象，他们没有大声说出来，只给出了肢体语言。</p><p><strong>深度学习（并没有）扩展</strong></p><p>其中一个关键口号是不停重复说「深度学习几乎可以毫不费力地实现扩展」。2012 年 AlexNet 出现，拥有大约 6 千万参数，那么现在我们的模型或许具备至少 1000 倍的参数吧？或许是的，但是问题在于：性能也是之前的 1000 倍吗？或者 100 倍？OpenAI 的一项研究显示：</p><p>在视觉应用领域，我们可以看到 VGG 和 ResNet 在计算资源到达一定数量级之后逐渐饱和（参数数量实际上减少了）。Xception 是谷歌 Inception 架构的变体，事实上它在 ImageNet 数据集上的性能仅比 Inception 好一点点，也只是稍微优于其他模型，因为 AlexNet 本质上解决了 ImageNet 问题。那么即使我们使用的计算量是 AlexNet 的 100 倍，我们得到的也是饱和的架构，不论是视觉模型还是图像分类。神经机器翻译是所有网络搜索公司都参与的一次大型「战役」，也无怪乎它使用了能使用的所有计算资源（尽管 Google Translate 效果比之前好了一些，但仍然不够优秀）。上图的最后三个点非常有趣地展示了强化学习相关项目，它们被应用于 DeepMind 和 OpenAI 的游戏中。尤其是 AlphaGo Zero 和更通用的 AlphaZero 耗费的计算量大到荒谬，而且无法在现实应用中使用，因为相当一部分计算量用在了模拟和生成数据上，此类模型需要大量数据。那么我们现在可以在几分钟内训练 AlexNet，而不用花费数天时间，但是我们可以在几天时间内训练出 1000 倍大的 AlexNet，并取得更好的性能吗？明显不能……</p><p>事实上，上图原本旨在展示深度学习扩展的优异性，但是却达到了相反的效果。我们无法扩展 AlexNet，并得到更好的结果，我们必须使用特定的架构，且高效额外的计算量在缺乏数量级增长的数据样本的情况下无法带来较大的性能改进，而这么多数据只有在模拟游戏环境中才能获得。</p><p><strong>自动驾驶车祸</strong></p><p>目前对深度学习最大力的鼓吹在自驾汽车领域（我曾在很长时间内对此有所期待）。起初，人们认为端到端深度学习可以在某种程度上解决这个问题，这也是英伟达曾大肆宣扬的假设。虽然不敢保证，但我不认为这个世界上还有人会相信这个说法。看看去年的加州 DMV 脱离报告中，英伟达的汽车无法在没有脱离的情况下驾驶十公里。2016 年以来发生了好几起特斯拉自动导航引起的事故，有些甚至是致命的。可以认为特斯拉的自动导航不应该和自驾混淆，但至少在核心上它们是依赖于相同的技术。在今天，除了偶尔的特大失误，它仍然无法在十字路口停车、识别交通灯或通过交通环岛。这还是在 2018 年 5 月，在承诺穿越美国东西海岸（coast to coast）的特斯拉自动驾驶旅程（并没有发生，虽然谣言称他们曾尽力尝试，但并不能在没有约 30 次脱离的条件下成功）的几个月之后的状况。在几个月前（2018 年 2 月），马斯克在一次电话会议中被问及 coast to coast 自驾时重复道：</p><blockquote><p>「我们本来应该完成穿越东西海岸的自动驾驶行程，但它需要太多的专用代码才能有效地执行，这令其变得脆弱，才能在特定的路径中工作，而不能得到通用的解决方案。因此我认为我们可以在相同的路径下重复使用一个方案，但却不适用于任何其它路径，这根本不是真正的解决方案…」「神经网络领域的进展令我感到兴奋。它和那些呈指数级增长的技术发展趋势类似，起初并没有什么进展、并没有什么进展… 然后突然间就 Wow~。自驾汽车可能也是这样。」</p></blockquote><p>看看上面那张来自 OpenAI 的图，似乎并没有出现指数级的增长趋势。本质上，以上马斯克的声明应该这样解释：「我们目前并没有能安全实现可以横跨美国的自动驾驶技术，虽然我们可以假装有，如果想的话（可能是这样）。我们非常希望神经网络的能力的指数级增长能很快出现，并把我们从耻辱和大量诉讼中解救出来。」</p><p>但目前为止，对 AI 泡沫的最重一击是 Uber 自驾汽车在亚利桑那州撞死行人的事故。从 NTSB 的初步报告中，我们可以看到惊人的论述：</p><p>在这份报告中，除了通常的系统设计失败之外，令人惊讶的是它们的系统用了很长的时间来确定它在前面到底看到了什么（那是行人、自行车、汽车，还是别的什么），而不是在这样的场景中做出唯一符合逻辑的决策，即确保不会撞到前面的事物。有这么几个原因：首先，人们通常使用言语表达来传递事实。因此人类通常会这样说：「我看到了一个骑自行车的人，因此我必须左转来避开他。」而大量的心理物理学文献提出相当不同的解释：人类看到的事物在其神经系统的快速感知回路中被很快地理解为障碍，因此他做出了快速回应来避开障碍，在很长时间后他才意识到发生了什么，并提供言语解释。</p><p>我们每天都做出了大量未被言语化的决策，在驾驶过程中就包含很多这样的决策。言语化是很费时费力的，现实中通常没有这样的时间。这些经历了十亿年进化而出现的机制让我们保持安全，而驾驶场景（虽然是现代的）使用了很多这样的反射。由于这些反射不是特定为驾驶而演化的，它们可能导致错误。在汽车里由于被胡蜂蛰而导致的膝跳反射可能导致很多事故和死伤。但我们对三维空间、速度的一般理解，预测智能体行为和出现在我们路径上的物理对象行为的能力是一种本能，在一亿年前也发挥着和当前一样的作用，并在进化过程中得到了充分的磨砺。</p><p>但是由于这些能力大部分很难用言辞表达，因此我们很难去衡量它们，也无法基于它们优化机器学习系统。现在这只在英伟达的端到端方法上是可行的：学习图像 → 动作映射，该方法跳过了任何言语表达，某种程度上这是正确的做法，但……问题在于输入空间的维度非常高，而动作空间的维度非常低。因此「标签」的「数量」与输入信息量相比非常小。在这种情况下，很容易学到虚假关系，正如深度学习对抗样本中那样。我们需要一种不同的方法，我假设整个感知输入的预测和动作是使系统抽象出世界语义的第一步，而非虚假关系。</p><p>事实上，如果我们从深度学习爆发中学到了什么的话，那就是（10k+ 维度的）图像空间中有足够多的虚假模式，以至于它们能够泛化至很多图像，且给人一种印象，即我们的分类器实际上理解它们所看到的事物。这就是事实，甚至 AI 领域顶级研究者也这么认为（参见论文《Measuring the tendency of CNNs to Learn Surface Statistical Regularities》）。根据我的观察，实际上很多顶级研究者不应该那么愤怒，Yann Lecun 曾经提醒过人们对 AI 的过度兴奋以及 AI 寒冬，即使 Geoffrey Hinton 在一次采访中也承认这可能是个死胡同，我们需要重新再来。现在的炒作太厉害了，甚至没有人听该领域创始人的看法。</p><p><strong>Gary Marcus 和他对炒作的反对</strong></p><p>我应该提一下意识到这种狂妄并敢于公开发表反对意见的人。其中一个活跃人物就是 Gary Marcus。尽管我并不完全认同他在 AI 方面的观点，但是我们有一点共识，即深度学习现状并不如炒作宣传所描绘的图景那样强大。事实上还差得远。参见《Deep Learning&#58; A Critical Appraisal》和《In defense of skepticism about deep learning》，在文章中他非常细致地解构了深度学习炒作。我非常尊重 Gary，他的行为是一个真正的科学家应该做的，而所谓的「深度学习明星」的行为则是廉价的。</p><p><strong>结论</strong></p><p>预测 AI 寒冬就像预测股市崩盘一样——你不可能知道它什么时候发生，但这是一个必然事件。就像股市崩盘之前一样，大多数人被宣传冲昏了头脑，忽略了熊市的先兆，即使事实就摆在眼前。在我看来，已经有迹象表明深度学习的衰退已经临近（可能在 AI 方面，现在这个名词已经被公司的宣传滥用了），事实是如此的明显，但由于越来越多的宣传报道，大部分人还毫无预料。这样的寒冬会有多「冷」？我不知道。下一个热点是什么？我也不知道。但我非常清楚变革即将来临，而且很快就会发生。</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.com/group/6562012511690818062/?iid=34137106508&amp;app=news_article&amp;timestamp=1527850678&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">AI寒冬将至？「人工智能衰退论」再起，却遭LeCun怒斥 - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如GeoffHinton、吴恩达、YanLeCun、李飞飞、GaryMarcus等，并以「谷歌、Facebook等公司对AI的研究兴趣正在衰退」作为论据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《AI Winter i
      
    
    </summary>
    
      <category term="科技" scheme="http://blockshare.top/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="深度学习" scheme="http://blockshare.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习" scheme="http://blockshare.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Google" scheme="http://blockshare.top/tags/Google/"/>
    
      <category term="人工智能" scheme="http://blockshare.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="Facebook" scheme="http://blockshare.top/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>Service Worker技术来做一个桥接互联网跟IPFS之间的网关 - 今日头条</title>
    <link href="http://blockshare.top/2018/6ead61ee/"/>
    <id>http://blockshare.top/2018/6ead61ee/</id>
    <published>2018-05-30T10:40:43.000Z</published>
    <updated>2018-05-30T10:40:44.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文因互联的前端&amp;数据工程师林东吴分享主题：ServiceWorker技术来做一个桥接互联网跟IPFS之间的网关。</p></blockquote><p>文因互联的前端&amp;数据工程师</p><p>林东吴</p><p><strong>分享主题：</strong></p><p><strong>Service Worker技术来做一个桥接互联网跟IPFS之间的网关。</strong></p><p>这个IPFS网关，我们要明确一下它的定义，它是让用户能通过互联网技术来访问IPFS网络上面的资源的一种程序，这张图上是一个我们一般说的一个网关，它是一个反向代理，右边是你的浏览器，你去访问一个网站，比如说文因互联的官网首页，这时候其实浏览器访问是我们的反向代理服务器，就图上这个地方，其实我们真实的服务器是被挡在代理服务器后方的，我们所有的页面资源实际上是存在这个地方，而用户通过这个网关来访问它们。</p><p>对于IPFS上的资源我们也是通过类似的方式，可以看到右边有一大串的网址，它们是之前曾经可以使用IPFS网关地址，现在很多都不能用了。这边挡在网关后面的IPFS上的一些一些节点，它们上面有些存储在IPFS上面的数据，那现在你的浏览器在右边，通过互联网访问这个IPFS网关的话，就可以让这个网关去访问挡在后面的IPFS网络，到IPFS网络上去取数据。</p><p>现在大家可能都会去使用这个IPFS官方提供的网关，主要原因是因为第三方网关很多都挂掉了，那怎么样才能让世界上有更多这种第三方网关，不让它们一个一个的挂掉，那我们就需要降低第三方维护网关的成本。</p><p>Service Worker也是一种网关，只不过这个网关不是运行在服务器上，它是运行在浏览器上。当我们打开这个网页，右边这个可以看做是后端服务器暴露API的地方，那么在后端程序员开发的API服务器和浏览器中间其实还隔了个Service Worker，Service Worker是W3C提出的一个规范，现在大部分浏览器都已经实现了。一般我们可以在设备上面去做一个反向代理服务器，在党在这个我们的浏览器跟API之间，但现在你看，我们可以在这边直接从IPFS网络上取数据，反回给前端。</p><p>这就是基于Service Worker的IPFS网关的基本原理，那为什么要做这个Service Worker网关呢？是因为运行在服务器上的网关有这几个缺陷，它很难scale up，比如说你只有一台服务器，那这时候有七八十万个人同时来访问一个爆款资源，都通过你的网关访问，如果它们访问都是不同的文件的话，这时候你你的这个节点就要把一大堆文件，从IPFS网络上都先load到你的服务器上，再通过这个你的网关去传给用户的浏览器，那这时候你这个服务器负载就非常大。</p><p>而且如果部署这样的服务器，你必须要有一个能运行够或者JS或者是Go的环境。那这就意味着你服务器配置不能很低，不能运行在一个比如说树莓派或者是ruff这种开发板上面。那当然它有一些好处，比如说它可以pin住一些文件，比如 pin 住一些热点文件，它就可以类似于变成一个静态服务器，可以很快地做一些响应。这是它的好处。</p><p>我们就可以想 Service Worker 在浏览器上，而不是运行在服务器上，那如果在浏览器上做的话，真正的服务器只需要是一个静态服务器，它只需要把页面还有一段带有 Service Worker 的JS脚本发送给浏览器，让浏览器来执行，也说服务器本身是不执行任何东西，它只是一个静态服务器，所以说你可以用开发版来做这样的服务器，那唯一的成本你需要买一个https的证书，还有个域名了。</p><p>唉当然它有一些坏处，比如说我们在服务器上的网关它可能会有一些缓存机制，那当前这个缓存机制我们还没有在 Service Worker 上开发出来。还有它只能给人类的用户使用，因为 Service Worker 它是一个浏览器上的规范。那如果说你通过一个程序，把它当做一个 REST API ，通过在程序里面写 AJAX 调用的话，那你是取不到东西了，因为 AJAX 调用的时候，你不能运行这个 Service Worker 。</p><p>还有一些可能的缺陷，我还没有测试过，有些网页它可能也使用了Service Worker。毕竟 Service Worker 已经是一种被广泛使用的技术，它可以把一个网页，变成一个桌面端的APP。像饿了吗好像在使用这种技术，你在手机上打开网页版饿了吗，会弹出一个提示让你把网页保存到首页，变成一个手机 APP 的应用图标，你再点这个首页上这个图标的话，它并不是打开的网页浏览器，而是打开一个像真的饿了吗 APP 一样的一个东西，叫 PWA 的东西。这种 Progress Web APP 中的核心技术Service Worker，那如果通过 Service Worker IPFS网关来访问饿了吗部署在 IPFS 上的应用，那可能它那就不会正常工作，这个我还没有测试过。因为饿了吗它们还没有把应用部署到IPFS上面……</p><p>这边可以看一下，这个绿色的是已经支持这项技术的浏览器，可以看到大部分的浏览器都是支持的。</p><p>那这个网关我来先来说一下它具体的实现原理：</p><p>它原理非常简单，主要就分为两个部分，第一部分：你看左边这边是一个人，它通过浏览器来访问这个网址，比如说 ipfsgateway.xyz/ipfs/somehash，它把这个东西输入到浏览器之后访问，而这时候第一步是访问这个网页，它上面带有一个 Service Worker 的 JS 脚本，这个JS脚本就开始安装到它的浏览器上面。</p><p>安装完之后，这个脚本就开始就开始启动了一个挡在它的手机和真正互联网之间的代理服务器。就在它手机上面运行的一个小服务器，反正代理服务器。这层代理服务器有两个部分的程序，第一个是有向无环图的这个遍历器，还有一个是各种不同类型文件的解析器。具体的实践原理如下：</p><p>我写的这个网关是参考IPFS官方JS网关，只做了一些适配 Service Worker 的改动。如果你是其他区块链项目的开发者，你也可以试着在 Service Worker 这一层去适配你的区块链网络，也就是说这一层可以做古典互联网和其他区块链网络的桥接，这一用法可能是一开始这个提出 Service Worker 这一规范的人都并没有想到的吧。</p><p>以上是我今天今天分享的全部内容，谢谢大家的聆听。 </p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.com/group/6561245682307432968/?iid=33509442807&amp;app=news_article&amp;timestamp=1527676602&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">Service Worker技术来做一个桥接互联网跟IPFS之间的网关 - 今日头条</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文因互联的前端&amp;amp;数据工程师林东吴分享主题：ServiceWorker技术来做一个桥接互联网跟IPFS之间的网关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文因互联的前端&amp;amp;数据工程师&lt;/p&gt;
&lt;p&gt;林东吴&lt;/p&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="科技" scheme="http://blockshare.top/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="软件" scheme="http://blockshare.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="程序员" scheme="http://blockshare.top/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="区块链" scheme="http://blockshare.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="脚本语言" scheme="http://blockshare.top/tags/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
      <category term="WebApp" scheme="http://blockshare.top/tags/WebApp/"/>
    
  </entry>
  
  <entry>
    <title>送你一张24季私享家礼券，一起买买买</title>
    <link href="http://blockshare.top/2018/e41484f4/"/>
    <id>http://blockshare.top/2018/e41484f4/</id>
    <published>2018-05-24T15:51:24.000Z</published>
    <updated>2018-05-24T15:51:25.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>送你一张24季私享家礼券，一起买买买</p></blockquote><h2 id="对不起，您访问的页面已被删除或不存在-有赞"><a href="#对不起，您访问的页面已被删除或不存在-有赞" class="headerlink" title="对不起，您访问的页面已被删除或不存在 - 有赞"></a>对不起，您访问的页面已被删除或不存在 - 有赞</h2><blockquote><p><strong>转载来源</strong>：<a href="https://shop19237871.youzan.com/v2/ump/fission/validate?order_no=E20180524235051067700002&amp;kdt_id=19045703&amp;sf=wx_sm&amp;is_share=1" target="_blank" rel="noopener">送你一张24季私享家礼券，一起买买买</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;送你一张24季私享家礼券，一起买买买&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;对不起，您访问的页面已被删除或不存在-有赞&quot;&gt;&lt;a href=&quot;#对不起，您访问的页面已被删除或不存在-有赞&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ian Goodfellow等提出自注意力GAN，ImageNet图像合成获最优结果</title>
    <link href="http://blockshare.top/2018/1c9b74fc/"/>
    <id>http://blockshare.top/2018/1c9b74fc/</id>
    <published>2018-05-24T06:32:49.000Z</published>
    <updated>2018-05-24T06:32:50.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>谷歌大脑的IanGoodfellow等人在他们的最新研究中提出“自注意力生成对抗网络”。将自注意力机制引入到卷积GAN中，作为卷积的补充，在ImageNet多类别图像合成任务中取得了最优的结果。</p></blockquote><p><strong> 新智元编译 </strong></p><p>来源：arxiv.org</p><p>翻译：肖琴</p><p><strong>【新智元导读】</strong>图像合成是计算机视觉中的一个重要问题。谷歌大脑的Ian Goodfellow等人在他们的最新研究中提出“自注意力生成对抗网络”（SAGAN），将自注意力机制引入到卷积GAN中，作为卷积的补充，在ImageNet多类别图像合成任务中取得了最优的结果。</p><p>论文地址：https&#58;//arxiv.org/pdf/1805.08318.pdf</p><p><strong>图像合成</strong>（Image synthesis）是计算机视觉中的一个重要问题。随着生成对抗网络（GAN）的出现，这个方向取得了显著进展。基于深度卷积网络的GAN尤其成功。但是，通过仔细检查这些模型生成的样本，可以观察到，在ImageNet这类的有许多图像类别的数据集上训练时，卷积GAN合成的图像不尽如人意。</p><p>针对这个问题，谷歌大脑的Ian Goodfellow和Augustus Odena，以及罗格斯大学的Han Zhang和Dimitris Metaxas等人在他们的最新研究中提出<strong>“自注意力生成对抗网络”（SAGAN）</strong>，将自注意力机制（self-attention mechanism）引入到卷积GAN中，作为卷积的补充，取得了最优的结果。</p><p><strong>摘要</strong></p><p>在这篇论文中，我们提出自注意力生成对抗网络（ Self-Attention Generative Adversarial Network ，SAGAN）。SAGAN允许对图像生成任务进行注意力驱动、长相关性的建模。传统的卷积GAN生成的高分辨率细节仅作为在低分辨率特征图上的空间局部点的函数。在SAGAN中，可以使用来自所有特征位置的线索来生成细节。此外，鉴别器可以检查图像的远端部分的高度详细的特征彼此一致。此外，最近的研究表明，生成器条件会影响GAN的性能。利用这些发现，我们将谱归一化到GAN生成器中，并发现这改进了训练动态。我们提出的SAGAN达到了state-of-the-art的结果，将Inception score从当前最高的36.8提高到52.52，并且在具有挑战性的ImageNet数据集上将Frechet Inception distance从27.62降低到18.65。注意力层的可视化表明，生成器利用与对象形状相对应的邻域，而不是固定形状的局部区域。</p><p><strong>SAGAN：将自注意力机制引入GAN</strong></p><p>尽管最先进的ImageNet GAN模型 &#91;17&#93; 擅长合成几乎<strong>没有结构性限制</strong>的图像类别（例如，海洋、天空和景观类，它们的区别更多在于<strong>纹理</strong>而不是几何结构），但它无法捕获在某些类别中经常出现的<strong>几何模式或结构模式</strong>（例如，狗通常有逼真的皮毛纹理，但没有明确区分的脚）。</p><p>一种可能的解释是，以前的模型<strong>严重依赖于卷积</strong>来建模不同图像区域之间的依赖关系。由于卷积运算符具有一个局部感受域，所以在经过几个卷积层之后，只能处理长距离的相关性。</p><p>由于各种原因，这可能会阻止学习<strong>长相关性（long-term dependencies）</strong>：小的模型可能无法表示它们，优化算法可能无法发现参数值，这些参数值仔细协调多个层，以捕获这些相关性，并且这些参数化在统计学上可能相当脆弱，当应用于以前未见过的输入时容易失败。增加卷积核的大小可以提高网络的表征能力，但这样做也会失去利用局部卷积结构获得的计算和统计效率。</p><p>另一方面，<strong>自注意力（Self-attention）可以更好地平衡模型的长相关性和计算与统计效率</strong>。self-attention模块以所有位置的特征加权和来计算响应，其中权重（或attention vectors）只以很小的计算成本来计算。</p><p>图 1：我们提出的SAGAN通过利用图像远端部分的互补特征来生成图像，而不是固定形状的局部区域，从而可以生成一致的对象/场景。图中每一行的第一个图像显示了带颜色编码点的五个代表性查询位置。其他五个图像是针对这些查询位置的 attention maps，其中对应的颜色编码的箭头概括了最受关注的区域。</p><p>在这项工作中，<strong>我们提出了自注意力生成对抗网络（SAGAN），它将自注意力机制（self-attention mechanism）引入到卷积GAN中</strong>。自注意力模块（self-attention module）是对卷积的补充，有助于模拟跨越图像区域的长距离、多层的依赖关系。通过self-attention，生成器可以绘制图像，所绘制图像中每个位置的精细细节都与图像远端的精细细节充分协调。此外，鉴别器还可以更准确地对全局图像结构执行复杂的几何约束。</p><p>图2：所提出的self-attention机制。⊗表示矩阵乘法，在每一行上执行softmax操作</p><p>除了self-attention之外，我们还将最近关于<strong>网络调节</strong>（network conditioning）的见解与GAN的性能结合起来。A. Odena等人的研究&#91;18&#93;表明，调节良好的生成器往往表现更好。我们建议使用以前仅应用于鉴别器的<strong>谱归一化技术</strong>（spectral normalization）来加强GAN生成器器的调节。</p><p>我们在ImageNet数据集上进行了大量的实验，以验证所提出的self-attention机制和稳定技术的有效性。SAGAN在图像合成方面的表现远远超过了state-of-the-art的表现，<strong>将此前报告的最高Inception score从36.8提高到52.52，将Fréchet初始距离（Fréchet Inception distance，FID）从27.62降低到18.65</strong>。attention层的可视化显示，生成器利用与对象形状相对应的区域，而不是固定形状的局部区域。</p><h1 id="ImageNet上的图像合成实验"><a href="#ImageNet上的图像合成实验" class="headerlink" title="ImageNet上的图像合成实验"></a><strong>ImageNet上的图像合成实验</strong></h1><p>为了评价所提出的方法，我们在LSVRC 2012 （ImageNet）上数据集进行了大量的实验。首先，我们对评估所提出的<strong>两种稳定GAN训练的技术</strong>进行有效性实验。其次，对所提出的self-attention mechanism进行了研究。最后，将SAGAN与其他state-of-the-art的图像生成方法进行了比较。</p><p><strong>评估指标</strong></p><p>我们<strong>使用Inception score（IS）和Fréchet初始距离（FID）进行定量评估</strong>。Inception score越高，表示图像质量越好。 FID是一个更加基于规则和综合性的指标，并且在评估生成的样本的真实性和变异性方面已被证明与人类的评估更加一致。越低的FID值意味着合成数据分布与真实数据分布之间的距离更近。</p><p>图3：基线模型与我们的模型的训练曲线，利用了我们提出的稳定技术</p><p>表1：GAN的Self-Attention与Residual块的比较。这些块被添加到网络的不同层。所有模型都经过100万次迭代的训练，并报告最佳的Inception score（IS）和Fréchet初始距离（FID）。</p><p>图4：基线模型和我们的模型随机生成的128×128图像样本</p><p>图5：attention maps的可视化。这些图像都由SAGAN生成</p><p><strong>与state-of-the-art模型的比较</strong></p><p>在ImageNet上，SAGAN与最先进的GAN模型&#91;19,17&#93;进行了比较。如表2所示，我们提出的SAGAN得到了Inception score和FID。Inception score方面，SAGAN将此前0最高的36.8提高到52.52；FID（18.65）也表明，SAGAN可以通过使用self-attention模块对图像区域之间的全局依赖关系进行建模，从而更好地模拟原始图像的分布。图6展示了由SAGAN生成的一些示例图像。</p><p>表2&#58; 将所提出的SAGAN与最先进GAN模型进行比较，任务是ImageNet上的类别条件图像生成</p><p>图6：SAGAN 生成的不同类别的128×128分辨率示例图像。每行展示一个类别的示例</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><p>在本研究中，我们提出自注意力生成对抗网络（SAGAN），它将self-attention机制引入到GAN的框架。 self-attention 模块在建模长相关性（ long-range dependencies）方面很有效。另外，我们证明了应用于生成器的谱归一化可以稳定GAN的训练，并且TTUR加速了正则化鉴别器的训练。SAGAN在ImageNet的分类条件图像生成任务上达到最先进的性能。</p><p><strong>【加入社群】</strong></p><p>新智元 AI 技术 + 产业社群招募中，欢迎对 AI 技术 + 产业落地感兴趣的同学，加小助手微信号&#58; <strong>aiera2015_3</strong> 入群；通过审核后我们将邀请进群，加入社群后务必修改群备注（姓名 - 公司 - 职位；专业群审核较严，敬请谅解）。</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.cn/group/6559024442628899332/?iid=32854223354&amp;app=news_article&amp;timestamp=1527143540&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">Ian Goodfellow等提出自注意力GAN，ImageNet图像合成获最优结果</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;谷歌大脑的IanGoodfellow等人在他们的最新研究中提出“自注意力生成对抗网络”。将自注意力机制引入到卷积GAN中，作为卷积的补充，在ImageNet多类别图像合成任务中取得了最优的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;stro
      
    
    </summary>
    
      <category term="技术" scheme="http://blockshare.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="人工智能" scheme="http://blockshare.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="可视化" scheme="http://blockshare.top/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="盗梦空间" scheme="http://blockshare.top/tags/%E7%9B%97%E6%A2%A6%E7%A9%BA%E9%97%B4/"/>
    
      <category term="艺术" scheme="http://blockshare.top/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="科普" scheme="http://blockshare.top/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>清华大学刘知远：知识表示学习及其应用（PPT下载）</title>
    <link href="http://blockshare.top/2018/b2b8c876/"/>
    <id>http://blockshare.top/2018/b2b8c876/</id>
    <published>2018-05-23T18:55:01.000Z</published>
    <updated>2018-05-23T18:55:18.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本讲座选自清华大学计算机系副教授刘知远于2018年4月27日在第二届“大数据在清华”高峰论坛上所做的题为《知识表示学习及其应用》的演讲。</p></blockquote><p>本讲座选自清华大学计算机系副教授<strong>刘知远</strong>于2018年4月27日在<strong>第二届“大数据在清华”高峰论坛</strong>上所做的题为<strong>《知识表示学习及其应用》</strong>的演讲。</p><p><strong>注：后台私信回复关键词“0520”，下载完整版PPT。</strong></p><p><strong>演讲全文</strong>刘知远：今天跟大家分享的题目叫”知识表示学习及其应用”。</p><p>大概在二三十年前，我们早就面临所谓的数据过载的问题,当时就有一个专门的领域叫信息检索，研究如何在大数据里面快速地获取相关的信息。</p><p>搜索引擎是一个非常重要的应用，我们每天都要无数次地使用，比如谷歌、百度，它们已经有快20年的历史了。</p><p>我们过去的搜索更多地是使用关键词匹配的形式。首先，用户写入若干关键词，然后搜索引擎进行关键词的匹配。2012年，谷歌提出新的口号，叫“Things，Not Strings”。它的意思是说搜索引擎不希望只是把用户输入的关键词或者它要处理的海量互联网数据，看成一个一个的字符串，而是希望能够真正地去认识，或者说真正地挖掘这些字符串背后所反映的现实世界的真实事情。</p><p>在这个理念的驱动下，诞生了谷歌的知识图谱产品。无论用户使用百度、搜狗还是谷歌，无论搜索名人、一个机构还是地名，都会出现关于机构或者人的一些结构化信息。</p><p>比如，我们搜索姚明，姚明的相关信息就会列出来，这些信息就是所谓的知识图谱。它尝试着把现实世界所有的信息都能够通过结构化的形式来存储。这种知识图谱，不只是为了支持我们的搜索引擎，能够把信息更精准地推送给我们，也是人工智能一些应用的基础设施。我们单从搜索引擎来看，在知识图谱的支持下，已经有了非常多新的应用。</p><p>在搜索引擎里，越来越多的时候不需要输入一些关键词，也不需要到网页里找答案，而是直接去问这个问题，搜索引擎就可以把答案告诉我们。</p><p>比如我们问”中国GDP最高的省份是哪个？”，它就可以直接把相关的答案告诉你。如果可以的话，还可以点击进去了解相关的信息。</p><p>比如我们问“清华大学成立于哪一年？”，它会把相关的信息告诉你，这些信息都是存储在背后的知识图谱里，需要应用自然语言处理技术还有知识图谱的技术，来了解你的问题，然后到知识图谱里找到答案。</p><p>甚至还可以尝试着回答一些更复杂的问题，比如说“清华和北大哪个好？”。搜狗告诉我们：有64%的人认为是清华好。</p><p>在知识图谱的支持下，我们还可以进行相关的智能推理。比如说“梁启超儿子的妻子的情人是谁？”，它的答案并不直接存在知识图谱里，而是需要在知识图谱结构里，跳若干次才能找到答案。这本身需要相关的一些智能推理来完成。实际上无论是谷歌，还是中国的百度，这些相对的搜索引擎都在尝试构建大量的知识图谱，给用户提供更好的服务。对于大数据时代来说，这件事情非常重要。</p><p>甚至还可以尝试着回答一些更复杂的问题，比如说“清华和北大哪个好？”。搜狗告诉我们：有64%的人认为是清华好。</p><p>在知识图谱的支持下，我们还可以进行相关的智能推理。比如说“梁启超儿子的妻子的情人是谁？”，它的答案并不直接存在知识图谱里，而是需要在知识图谱结构里，跳若干次才能找到答案。这本身需要相关的一些智能推理来完成。实际上无论是谷歌，还是中国的百度，这些相对的搜索引擎都在尝试构建大量的知识图谱，给用户提供更好的服务。对于大数据时代来说，这件事情非常重要。</p><p>到目前为止，这些商业的知识图谱应用都秉承一种比较传统的表示，我们称为”符号表示”。在计算机里，要想把知识图谱表示进来，就要把每一个实体都表示成一个独一无二的符号，把它表示成一个非常长的向量，只有一个位置是1，其他的全是0，这样就可以把不同的对象区分开。</p><p>这次深度学习的浪潮，席卷了人工智能非常多的领域，包括自然语言处理领域。分布式表示的对象均被表示成一个低维的稠密、实值向量。通过这种方式，我们就可以利用对象在空间的相对距离，反映它们之间的语义关系。两个对象离得越近，说明关系越紧密，两个对象离得越远，说明它们之间没有太强的关系。</p><p>自然语言处理是一种典型的长尾分布的大数据，最大的特点是会在长尾的部分有非常显著的数据稀疏问题。如果把这些对象都表述在低维向量空间里面，可以在这个空间里面利用少量的但是特别高频的对象，学习得到这个空间里面不同位置上的语义。当把那些长尾上稀疏的数据也映射到这个空间的时候，就可以借助那些高频的数据，一定程度上可以帮助我们解决大数据里面典型的长尾分布带来的数据稀疏问题。</p><p>另外一个非常重要的挑战是，自然语言存在多种粒度语言单位。在进行自然语言处理的时候，往往需要专门设计算法进行不同粒度单位的语义计算，比如算一个词跟一个句子的相似度，算一个句子跟一个文档的相似度。如果能够把这些对象都放在低维的向量空间里面，我们就可以有一个统一的计算方案，可以算它们之间的相似度。</p><p>比如对于同一个研究对象，一个句子或者一个文档，都会有非常多不同的任务，要做词化分析、句法分析或者语义分析，底层的表示如果一致，也能够更好地帮我们提供多任务学习的支持，这是我们认为的分布式表示的一个优势。</p><p>大规模知识图谱传统表示也是基于符号的方式，都是用独一无二的符号来进行表示。把知识图谱映射到低维的向量空间里面去，就是所谓的知识表示学习。</p><p>知识图谱里面有很多的事实，我们可以把每一个事实，它的向量看成是从头实体到尾实体向量平移的操作。</p><p>如上图，头实体用h表示，尾实体用t表示。假如说存在r的关系，这个r就是从头实体到尾实体的平移。简言之，我们的优化目标，就是要让h+r=t。这样有了成千上百万的三元组一起做优化，我们就可以得到所有实体和它们关系之间低维的向量表示。有了低维向量表示，就可以做非常多的相关的语义的计算。</p><p>从大规模知识图谱到低维向量空间过程中一定是有信息损失的，但是能够快速定位那些最有可能的实体集合，然后利用一些更复杂的算法找它的真正的答案。这是低维向量表示的应用意义。</p><p>我们尝试利用知识图谱进行关系预测，得到了所有实体和关系之间的表示，用t-h就可以判断。</p><p>知识获取的另一个非常重要的来源是文本信息，可以通过一句话判断两个实体之间可能存在的关系。</p><p>如果把知识图谱映射到低维向量空间里面，能够非常好地把文本语义空间结合起来，相当于信息量能够充分地扩展出来，显著地提升知识获取的准确度。</p><p>另外一个尝试叫做实体对齐。我们面临一个问题，不同的机构和国家，他们可能会构建各种各样不同的知识图谱，这些知识图谱既有不同，也会存在一定共性。我们怎么能够把这些不同来源的知识图谱给融合成一个更大的知识图谱，这里面就面临一个实体对齐的问题。知识图谱里面的实体和另一个知识图谱的实体是同一个实体，我们叫做实体对齐。</p><p>两个知识图谱可以分别学习两个空间，然后用已知的两个知识图谱里面对齐的实体，就可以把这两个空间真正关联起来。我可以知道这个空间里面的一个位置，跟这个空间里面的另一个位置，它们之间有关联，相当于分别学习两个Knowledge Graph的表示空间，然后用非常有限的种子的实体，把这两个空间给融合在一起。</p><p>大量的实验证明，我们的方法能够显著地提高两个知识图谱进行对齐的效果，同时说明知识图谱有非常显著的长尾效应，把它映射到低维向量空间里，能够更好地利用知识图谱全局信息建立语义空间。</p><p>第三个任务叫实体分类，这对于理解一句话，或者从这句话中抽取实体之间的关系都非常重要。最大的问题在于知识图谱如果用符号表示，它很难能够跟深度学习结合在一起。现在由于可以进行分布式表示，那么很自然地可以把这两个模型融合在一起。</p><p>在过去，知识图谱虽然很大很重要，但是很难用，因为它是一个典型的结构化的信息，跟文本的信息很难融合。但是现在有了低维向量表示，就真正地可以把知识图谱的知识，和文本信息放在一个空间里面进行相关的操作。在这个方面，我们认为未来对于知识图谱的大规模表示的语义空间，会在非常多的方向上有应用。但是，我们发现在一些通用的知识图谱上，学一个大规模知识图谱表示学习的模型还是比较难。所以我们做了一个平台，把目前来看比较有效的一些知识表示的模型全都实现，都用统一的接口。</p><p>我们面向两个通用的大规模知识图谱WikiDATA和Freebase，基于表示学习的技术将知识图谱映射到一个低维的语义空间里面，有望深入地应用到多个领域，如信息检索、推荐系统。这两个领域都在积极考虑使用大规模知识图谱信息，我们也正尝试把知识用低维空间提升检索效果，效果非常明显。</p><p>在金融、医疗、法律等垂直领域，构建知识图谱的过程非常复杂且耗时耗力，我们认为表示学习能够在知识获取方面发挥一些作用。目前，大规模知识图谱对日常知识的覆盖度以及更新的速度都非常有限。未来我们希望能够做一些深入的工作，花足够多的力气在知识图谱技术上。以上就是今天希望跟大家分享的主要内容，谢谢大家！</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.com/group/6558813288333836804/?iid=32854223354&amp;app=news_article&amp;timestamp=1527101689&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">清华大学刘知远：知识表示学习及其应用（PPT下载）</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本讲座选自清华大学计算机系副教授刘知远于2018年4月27日在第二届“大数据在清华”高峰论坛上所做的题为《知识表示学习及其应用》的演讲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本讲座选自清华大学计算机系副教授&lt;strong&gt;刘知远&lt;/stron
      
    
    </summary>
    
      <category term="科技" scheme="http://blockshare.top/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="机器学习" scheme="http://blockshare.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="大数据" scheme="http://blockshare.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="清华大学" scheme="http://blockshare.top/tags/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="刘知远" scheme="http://blockshare.top/tags/%E5%88%98%E7%9F%A5%E8%BF%9C/"/>
    
      <category term="PowerPoint" scheme="http://blockshare.top/tags/PowerPoint/"/>
    
  </entry>
  
  <entry>
    <title>自动驾驶攻破的难点在哪，何时能到Level 5？ - 知乎</title>
    <link href="http://blockshare.top/2018/71e6c12c/"/>
    <id>http://blockshare.top/2018/71e6c12c/</id>
    <published>2018-05-21T18:22:20.000Z</published>
    <updated>2018-05-21T18:22:19.911Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>知乎用户的回答，获得 42 个赞同</p></blockquote><p>## </p><blockquote><p><strong>转载来源</strong>：<a href="https://www.zhihu.com/question/65799732/answer/364663941?from=timeline&amp;utm_medium=social&amp;utm_oi=930149289800298496&amp;utm_source=wechat_session" target="_blank" rel="noopener">自动驾驶攻破的难点在哪，何时能到Level 5？ - 知乎</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;知乎用户的回答，获得 42 个赞同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;## &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转载来源&lt;/strong&gt;：&lt;a href=&quot;https://www.zhihu.com/question
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chinese Word Vectors：目前最全的中文预训练词向量集合</title>
    <link href="http://blockshare.top/2018/894c9f0f/"/>
    <id>http://blockshare.top/2018/894c9f0f/</id>
    <published>2018-05-21T18:21:42.000Z</published>
    <updated>2018-05-21T18:21:41.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近日，来自北京师范大学和人民大学的研究者开源了「中文词向量语料库」，试图为大家解决这一问题，该库包含经过数十种用各领域语料（百度百科、维基百科、人民日报</p></blockquote><blockquote><p>对于国内自然语言处理的研究者而言，中文词向量语料库是需求很大的资源。近日，来自北京师范大学和人民大学的研究者开源了「中文词向量语料库」，试图为大家解决这一问题，该库包含经过数十种用各领域语料（百度百科、维基百科、人民日报 1947-2017、知乎、微博、文学、金融、古汉语等）训练的词向量，涵盖各领域，且包含多种训练设置。目前，该研究的论文《Analogical Reasoning on Chinese Morphological and Semantic Relations》已经被 ACL2018 大会接收。</p></blockquote><p>项目链接：https&#58;//github.com/Embedding/Chinese-Word-Vectors</p><p>该项目提供使用不同表征（稀疏和密集）、上下文特征（单词、n-gram、字符等）以及语料库训练的中文词向量（嵌入）。在这里，你可以轻松获得具有不同属性的预训练向量，并将它们用于各类下游任务。</p><p>此外，开发者还在该工具中提供了一个中文类比推理数据集 CA8 及其评估工具包，用户可以以此评估自己词向量的质量。</p><p><strong>格式</strong></p><p>本资源中的预训练词向量文件以文本格式存储。每一行包含一个单词及其词向量。每个值由空格分开。第一行记录元信息：第一个数字表示该单词在文件中的排序，第二个数字表示维度大小。</p><p>除了密集单词向量（以 SGNS 训练），该项目还提供了稀疏向量（以 PPMI 训练）。它们与 liblinear 格式相同，其中「：」前的数字代表维度索引，「：」后的数字表示值。</p><p><strong>预训练中文词向量</strong></p><p><strong>基本设定</strong></p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/15263640596160f37aa2fa3" img_width="1033" img_height="148" alt="Chinese Word Vectors：目前最全的中文预训练词向量集合" inline="0"></p><p><strong>多领域词汇</strong></p><p>中文词向量在不同的表征、上下文特征和语料库上进行了训练。</p><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/1526364059208a861fd57ef" img_width="1080" img_height="651" alt="Chinese Word Vectors：目前最全的中文预训练词向量集合" inline="0"></p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/152636405968331525b6a28" img_width="1080" img_height="656" alt="Chinese Word Vectors：目前最全的中文预训练词向量集合" inline="0"></p><p>*该项目提供了字向量，因为古汉语大多数汉字独立成词。</p><p><strong>多种共现信息</strong></p><p>开发者发布了在不同的共现（co-occurrence）统计数据上的词向量。目标和上下文向量在相关的论文中一般称为输入和输出向量。</p><p>在这一部分中，我们可以获取词层面之上的任意语言单元向量。例如，汉字向量包含在词-汉字的上下文向量中。所有向量都在百度百科上使用 SGNS 训练。</p><p><img src="http&#58;//p1.pstatp.com/large/pgc-image/152636405925243f4b0a7fb" img_width="1080" img_height="771" alt="Chinese Word Vectors：目前最全的中文预训练词向量集合" inline="0"></p><p><strong>表征</strong></p><p>现有的词表征方法一般可分为两种，即密集型和稀疏型的词嵌入表征。SGANS 模型（word2vec工具包中的模型）和 PPMI 模型分别是这两种表征的典型案例。SGNS 模型通过一个浅层神经网络学习低维度的密集向量，这也称为神经嵌入方法。PPMI 模型是一种稀疏的特征袋（bag-of-feature）表征方法，且它会使用正逐点互信息（PPMI）对特征进行加权。</p><p><strong>上下文特征</strong></p><p>三种上下文特征：单词、n-gram 和字符在词嵌入文献中很常用。大多数词表征方法本质上利用了词-词的共现统计，即使用词作为上下文特征（词特征）。受语言建模问题的启发，开发者将 n-gram 特征引入了上下文中。词到词和词到 n-gram 的共现统计都被用于训练 n-gram 特征。对于中文而言，字符（即汉字）通常表达了很强的语义。为此，开发者考虑使用词-词和词-字符的共现统计来学习词向量。字符级的 n-gram 的长度范围是从 1 到 4（个字符特征）。</p><p>除了词、n-gram 和字符或汉字以外，还有其它对词向量的属性具有重要影响的特征。例如，使用整个文本作为上下文特征能将更多的主题信息引入到词嵌入向量中，使用依存关系解析树作为上下文特征能为词向量添加语法信息等。本项目考虑了 17 种同现类型。</p><p><strong>语料库</strong></p><p>开发者做了大量工作来收集多个领域的语料库。所有的文本数据都通过删除 html 和 xml 标记进行了预处理。只有纯文本被保留并使用 HanLP(v_1.5.3) 进行词分割。语料库的详细信息如下：</p><p><img src="http&#58;//p3.pstatp.com/large/pgc-image/152636405965233c603ec82" img_width="900" img_height="708" alt="Chinese Word Vectors：目前最全的中文预训练词向量集合" inline="0"></p><p>所有的单词都被包含其中，包括低频词。</p><p><strong>工具包</strong></p><p>所有的词向量由 ngram2vec 工具包训练。ngram2vec 工具包是word2vec和 fasttext 工具包的超集合，其支持抽象上下文特征和模型。</p><ul><li>ngram2vec：https&#58;//github.com/zhezhaoa/ngram2vec/- word2vec：https&#58;//github.com/svn2github/word2vec- fasttext：https&#58;//github.com/facebookresearch/fastText<br>word2vec：https&#58;//github.com/svn2github/word2vec</li></ul><p><strong>中文词类比基准</strong></p><p>词向量的质量通常由类比问题任务进行评估。在该项目中，开发者使用了两个基准来评估。第一个是 CA-translated，其中大多数类比问题直接从英语基准中翻译得到。虽然 CA-translated 在很多中文词嵌入论文中被广泛应用，但它仅包含了三个语义问题和 134 个中文词。相对的，CA8 是专门为中文语言设计的。它包含了 17813 个类比问题，覆盖了综合的词法和语义关联。CA-translated、CA8 和它们的详细信息在 testets 文件夹中。</p><p><strong>评估工具包</strong></p><p>评估工具包在 evaluation 文件夹中。</p><p>运行以下代码可评估密集向量：</p><p>运行以下代码可评估稀疏向量：</p><p><strong>参考文献</strong></p><p>如果要使用这些嵌入和 CA8 数据集，请引用开发者的论文：</p><p>Shen Li, Zhe Zhao, Renfen Hu, Wensi Li, Tao Liu, Xiaoyong Du, Analogical Reasoning on Chinese Morphological and Semantic Relations, ACL 2018.</p><blockquote><p><strong>转载来源</strong>：<a href="http://m.toutiaocdn.com/group/6555683864981799427/?iid=32583381102&amp;app=news_article&amp;timestamp=1526375999&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">Chinese Word Vectors：目前最全的中文预训练词向量集合</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;近日，来自北京师范大学和人民大学的研究者开源了「中文词向量语料库」，试图为大家解决这一问题，该库包含经过数十种用各领域语料（百度百科、维基百科、人民日报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于国内自然语言处理的研究
      
    
    </summary>
    
      <category term="技术" scheme="http://blockshare.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编程语言" scheme="http://blockshare.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://blockshare.top/tags/Python/"/>
    
      <category term="Word" scheme="http://blockshare.top/tags/Word/"/>
    
      <category term="HTML" scheme="http://blockshare.top/tags/HTML/"/>
    
      <category term="金融" scheme="http://blockshare.top/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>兴趣导向：95后用户内容消费洞察报告</title>
    <link href="http://blockshare.top/2018/fa3eb7ab/"/>
    <id>http://blockshare.top/2018/fa3eb7ab/</id>
    <published>2018-05-21T18:21:27.000Z</published>
    <updated>2018-05-21T18:21:26.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>95后的内容消费习惯。</p></blockquote><h2 id="兴趣导向：95后用户内容消费洞察报告-36氪"><a href="#兴趣导向：95后用户内容消费洞察报告-36氪" class="headerlink" title="兴趣导向：95后用户内容消费洞察报告_36氪"></a>兴趣导向：95后用户内容消费洞察报告_36氪</h2><blockquote><p><strong>转载来源</strong>：<a href="https://36kr.com/p/5134397.html?from=singlemessage" target="_blank" rel="noopener">兴趣导向：95后用户内容消费洞察报告</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;95后的内容消费习惯。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;兴趣导向：95后用户内容消费洞察报告-36氪&quot;&gt;&lt;a href=&quot;#兴趣导向：95后用户内容消费洞察报告-36氪&quot; class=&quot;headerlink&quot; title=&quot;兴趣
      
    
    </summary>
    
    
  </entry>
  
</feed>
